<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>YiFeng&#39;s Zone</title>
  <subtitle>起始于Android，不止于Android</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yifeng.studio/"/>
  <updated>2016-10-24T13:00:00.000Z</updated>
  <id>http://yifeng.studio/</id>
  
  <author>
    <name>亦枫</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Android RenderScript 简单高效实现图片的高斯模糊效果</title>
    <link href="http://yifeng.studio/2016/10/20/android-renderscript-blur/"/>
    <id>http://yifeng.studio/2016/10/20/android-renderscript-blur/</id>
    <published>2016-10-20T06:28:04.000Z</published>
    <updated>2016-10-24T13:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>高斯模糊（Gaussian blur）和毛玻璃效果（亦称磨砂效果），近两年在移动端的UI设计上越来越流行，特别是iOS手机上出现的较多，iOS系统也提供了相应的API帮助开发人员分分钟实现这两个效果。而Android系统则经历了一个漫长的探索过程，对图片的处理，从Java算法到NDK方式实现等，各种摸索层出不穷。</p>
<a id="more"></a>
<p>值得欣慰的是，Google终于在API 11中引入了<a href="https://developer.android.com/guide/topics/renderscript/compute.html" target="_blank" rel="external">RenderScript</a>，一个强大的图片处理框架，帮助Android开发人员专注于图片处理算法而不是API的调度工作。使用RenderScript进行图片处理，还需要了解<a href="http://android-developers.blogspot.tw/2013/08/renderscript-intrinsics.html" target="_blank" rel="external">RenderScript Intrinsics</a>，一些可以帮助RenderScript快速实现各种图片处理的操作类。比如<a href="http://developer.android.com/reference/android/renderscript/ScriptIntrinsicBlur.html" target="_blank" rel="external">ScriptIntrinsicBlur</a>，可以简单高效地帮助我们实现高斯模糊效果：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Bitmap <span class="title">blurBitmap</span><span class="params">(Bitmap bitmap)</span></span>&#123;</span><br><span class="line">		</span><br><span class="line">	<span class="comment">//Let's create an empty bitmap with the same size of the bitmap we want to blur</span></span><br><span class="line">	Bitmap outBitmap = Bitmap.createBitmap(bitmap.getWidth(), bitmap.getHeight(), Config.ARGB_8888);</span><br><span class="line">		</span><br><span class="line">	<span class="comment">//Instantiate a new Renderscript</span></span><br><span class="line">	RenderScript rs = RenderScript.create(getApplicationContext());</span><br><span class="line">		</span><br><span class="line">	<span class="comment">//Create an Intrinsic Blur Script using the Renderscript</span></span><br><span class="line">	ScriptIntrinsicBlur blurScript = ScriptIntrinsicBlur.create(rs, Element.U8_4(rs));</span><br><span class="line">		</span><br><span class="line">	<span class="comment">//Create the Allocations (in/out) with the Renderscript and the in/out bitmaps</span></span><br><span class="line">	Allocation allIn = Allocation.createFromBitmap(rs, bitmap);</span><br><span class="line">	Allocation allOut = Allocation.createFromBitmap(rs, outBitmap);</span><br><span class="line">		</span><br><span class="line">	<span class="comment">//Set the radius of the blur: 0 &lt; radius &lt;= 25</span></span><br><span class="line">	blurScript.setRadius(<span class="number">25.0f</span>);</span><br><span class="line">		</span><br><span class="line">	<span class="comment">//Perform the Renderscript</span></span><br><span class="line">	blurScript.setInput(allIn);</span><br><span class="line">	blurScript.forEach(allOut);</span><br><span class="line">		</span><br><span class="line">	<span class="comment">//Copy the final bitmap created by the out Allocation to the outBitmap</span></span><br><span class="line">	allOut.copyTo(outBitmap);</span><br><span class="line">		</span><br><span class="line">	<span class="comment">//recycle the original bitmap</span></span><br><span class="line">	bitmap.recycle();</span><br><span class="line">		</span><br><span class="line">	<span class="comment">//After finishing everything, we destroy the Renderscript.</span></span><br><span class="line">	rs.destroy();</span><br><span class="line">		</span><br><span class="line">	<span class="keyword">return</span> outBitmap;	</span><br><span class="line">		</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>通过设置模糊半径（radius）的大小来控制图片的清晰度，简短的几行代码轻松实现图片的高斯模糊处理，我们看一下radius等于最大值25时的图片模糊效果：</p>
<p>原图效果：<br><img src="http://ocq7gtgqu.bkt.clouddn.com/RenderScript-Blur-Before.png" alt="RenderScript-Blur-Before"></p>
<p>高斯模糊：<br><img src="http://ocq7gtgqu.bkt.clouddn.com/RenderScript-Blur-After.png" alt="RenderScript-Blur-After"></p>
<p>注意：ScriptIntrinsicBlur的相关方法只支持API 17及以上版本的系统，为了兼容旧版本，Google 提供了<code>android.support.v8.renderscript</code>兼容包，使用时引入该兼容包包下的相关类即可：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> android.support.v8.renderscript.Allocation;</span><br><span class="line"><span class="keyword">import</span> android.support.v8.renderscript.Element;</span><br><span class="line"><span class="keyword">import</span> android.support.v8.renderscript.RenderScript;</span><br><span class="line"><span class="keyword">import</span> android.support.v8.renderscript.ScriptIntrinsicBlur;</span><br></pre></td></tr></table></figure>
<p>注意：<code>android.support.v8.renderscript</code>兼容包的使用不需要在<code>app/build.gradle</code>文件中额外添加依赖，而是在<code>defaultConfig</code>配置中添加如下两行代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">defaultConfig &#123;</span><br><span class="line">	......</span><br><span class="line">	renderscriptTargetApi 19</span><br><span class="line">	renderscriptSupportModeEnabled  true</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在设计上巧妙地运用高斯模糊往往能达到出乎意料的体验效果，比如大神<a href="https://github.com/daimajia" target="_blank" rel="external">daimajia</a>就利用RenderScript和<a href="https://github.com/JakeWharton/NineOldAndroids" target="_blank" rel="external">NineOldAndroids</a>做了一个比较有创意的UI交互，开源库为：<a href="https://github.com/daimajia/AndroidViewHover" target="_blank" rel="external">AndroidViewHover</a>，效果如下，感兴趣的同学可以一探究竟：</p>
<p><img src="http://ocq7gtgqu.bkt.clouddn.com/daimajia-AndroidViewHover.gif" alt="daimajia-AndroidViewHover.gif"></p>
<p>关于Android平台的图片模糊处理，在GitHub上有一些较为优秀的开源类库，笔者整理了一些，推荐给大家学习使用：</p>
<ul>
<li><a href="https://github.com/500px/500px-android-blur" target="_blank" rel="external">500px/500px-android-blur</a></li>
<li><a href="https://github.com/Dimezis/BlurView" target="_blank" rel="external">Dimezis/BlurView</a></li>
<li><a href="https://github.com/wasabeef/Blurry" target="_blank" rel="external">wasabeef/Blurry</a></li>
<li><a href="https://github.com/kikoso/android-stackblur" target="_blank" rel="external">kikoso/android-stackblur</a></li>
</ul>
<p>当然，不同类库实现的方式、采取的算法和耗费的时间各有差异，开源项目<a href="https://github.com/patrickfav/BlurTestAndroid" target="_blank" rel="external">BlurTestAndroid</a>对这些类库做了一个统计和比较，选择不同尺寸的图片和不同大小的模糊半径，以图表的形式直观地展示各种类库的模糊处理效率：</p>
<p><img src="http://ocq7gtgqu.bkt.clouddn.com/BlurTestAndroid.jpg" alt="BlurTestAndroid.jpg"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;高斯模糊（Gaussian blur）和毛玻璃效果（亦称磨砂效果），近两年在移动端的UI设计上越来越流行，特别是iOS手机上出现的较多，iOS系统也提供了相应的API帮助开发人员分分钟实现这两个效果。而Android系统则经历了一个漫长的探索过程，对图片的处理，从Java算法到NDK方式实现等，各种摸索层出不穷。&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://yifeng.studio/categories/Android/"/>
    
    
      <category term="Android" scheme="http://yifeng.studio/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Android 使用CardView轻松实现卡片式设计</title>
    <link href="http://yifeng.studio/2016/10/18/android-cardview/"/>
    <id>http://yifeng.studio/2016/10/18/android-cardview/</id>
    <published>2016-10-18T08:18:16.000Z</published>
    <updated>2016-10-18T12:19:35.000Z</updated>
    
    <content type="html"><![CDATA[<p>Material design中有一种很个性的设计概念：卡片式设计（Cards），这种设计与传统的List Item有所区别，Cards包含更多的内容元素和拥有自己的UI特征，关于Cards的设计规范可以参考官网介绍：</p>
<p><a href="https://material.google.com/components/cards.html#" target="_blank" rel="external">https://material.google.com/components/cards.html#</a></p>
<p>为了更好地实现这种 Cards UI 的设计，Google在v7包中引进了一种全新的控件：<a href="https://developer.android.com/reference/android/support/v7/widget/CardView.html#" target="_blank" rel="external">CardVew</a>，本文将从开发的角度介绍CardView的一些常见使用细节。</p>
<a id="more"></a>
<p>Google用一句话介绍了CardView：一个带圆角和阴影背景的FrameLayout。CardView在Android Lollipop（API 21）及以上版本的系统中适配较好，本文我们以一个具体的例子来学习CardView的基本使用和注意事项，效果图如下：</p>
<p><img src="http://ocq7gtgqu.bkt.clouddn.com/CardView-samples-01.png" alt="CardView-samples-01.png"></p>
<p>上图展示的是一个list列表，列表中的item使用了卡片式设计，主要利用CardView控件实现，为了精简文章内容，这里我们将item布局中的核心代码罗列出来，加以分析：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span><br><span class="line">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></span><br><span class="line">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></span><br><span class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span><br><span class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span><br><span class="line">    <span class="attr">android:orientation</span>=<span class="string">"vertical"</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">android.support.v7.widget.CardView</span></span><br><span class="line">        <span class="attr">tools:targetApi</span>=<span class="string">"lollipop"</span></span><br><span class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span><br><span class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span><br><span class="line">        <span class="attr">android:stateListAnimator</span>=<span class="string">"@drawable/lift_on_touch"</span></span><br><span class="line">        <span class="attr">android:layout_marginLeft</span>=<span class="string">"@dimen/dp_8"</span></span><br><span class="line">        <span class="attr">android:layout_marginRight</span>=<span class="string">"@dimen/dp_8"</span></span><br><span class="line">        <span class="attr">android:layout_marginBottom</span>=<span class="string">"@dimen/dp_8"</span></span><br><span class="line">        <span class="attr">android:clickable</span>=<span class="string">"true"</span></span><br><span class="line">        <span class="attr">android:foreground</span>=<span class="string">"?android:attr/selectableItemBackground"</span></span><br><span class="line">        <span class="attr">app:cardCornerRadius</span>=<span class="string">"@dimen/dp_4"</span></span><br><span class="line">        <span class="attr">app:cardUseCompatPadding</span>=<span class="string">"true"</span></span><br><span class="line">        <span class="attr">app:cardPreventCornerOverlap</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">RelativeLayout</span></span><br><span class="line">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span><br><span class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- image、text等其他内容 --&gt;</span></span><br><span class="line">            ......</span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">android.support.v7.widget.CardView</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>可以看出，核心部分在于CardView的属性使用，下面我们针对几个特殊的属性逐一分析，深化了解。</p>
<h1 id="排版技巧"><a href="#排版技巧" class="headerlink" title="排版技巧"></a>排版技巧</h1><hr>
<p>前面我们说过，CardView从本质上属于FrameLayout，而CardView通常包含了较多的内容元素，为了方便地排版布局中的各个元素，一般借助于其他基本布局容器，比如这里我们使用了一个<code>RelativeLayout</code>作为CardView的唯一Child。</p>
<h1 id="阴影Padding"><a href="#阴影Padding" class="headerlink" title="阴影Padding"></a>阴影Padding</h1><hr>
<p>在Android Lollipop之前的系统，CardView会自动添加一些额外的padding空间来绘制阴影部分，这也导致了以Lollipop为分界线的不同系统上CardView的尺寸大小不同。为了解决这个问题，有两种方法：第一种，使用不同API版本的dimension资源适配（也就是借助values和values-21文件夹中不同的dimens.xml文件）；第二种，就是使用<code>setUseCompatPadding</code>属性，设置为true（默认值为false），让CardView在不同系统中使用相同的padding值。</p>
<h1 id="圆角覆盖"><a href="#圆角覆盖" class="headerlink" title="圆角覆盖"></a>圆角覆盖</h1><hr>
<p>这也是一个解决系统兼容的问题。在pre-Lollipop平台（API 21版本之前）上，CardView不会裁剪内容元素以满足圆角需求，而是使用添加padding的替代方案，从而使内容元素不会覆盖CardView的圆角。而控制这个行为的属性就是cardPreventCornerOverlap，默认值为true。在本例中我们设置了该属性为false。这里我们看一下，在pre-Lollipop平台中，不同cardPreventCornerOverlap值的效果对比图（左false，右true）：</p>
<p><img src="http://ocq7gtgqu.bkt.clouddn.com/CardView-samples-02.png" alt="CardView-samples-02.png"></p>
<p>显然，默认值下自动添加padding的方式不可取，所以需要设置该属性值为false。需要注意的一点是，该属性的设置在Lollipop及以上版本的系统中没有任何影响，除非cardUseCompatPadding的值为true。</p>
<h1 id="Ripple效果"><a href="#Ripple效果" class="headerlink" title="Ripple效果"></a>Ripple效果</h1><hr>
<p>Cards一般都是可点击的，为此我们使用了foreground属性并使用系统的selectableItemBackground值，同时设置clickable为true（如果在java代码中使用了cardView.setOnClickListener，就可以不用写clickable属性了），从而达到在Lollipop及以上版本系统中实现点击时的涟漪效果（Ripple），如图：</p>
<p><img src="http://ocq7gtgqu.bkt.clouddn.com/CardView-samples-03.gif" alt="CardView-samples-03.gif"></p>
<p>在pre-Lollipop版本中，则是一个普通的点击变暗的效果，这里就不截图展示了，如果想改变老版本的点击效果，也可以通过版本兼容的方式另行修改。</p>
<h1 id="lift-on-touch"><a href="#lift-on-touch" class="headerlink" title="lift-on-touch"></a>lift-on-touch</h1><hr>
<p>根据官网<a href="https://material.google.com/motion/material-motion.html#" target="_blank" rel="external">Material motion</a>部分对交互动作规范的指导，Cards、Button等视图应该有一个触摸抬起（lift-on-touch）的交互效果，也就是在三维立体空间上的Z轴发生位移，从而产生一个阴影加深的效果，与Ripple效果共同使用，官网给了一个很好的示例图：</p>
<p><img src="http://ocq7gtgqu.bkt.clouddn.com/CardView-samples-04.gif" alt="CardView-samples-04.gif"></p>
<p>在实现这个效果也很简单，可以在<code>res/drawable</code>目录下建立一个<code>lift_on_touch.xml</code>文件，内容如下：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="line"><span class="comment">&lt;!-- animate the translationZ property of a view when pressed --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">selector</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span></span><br><span class="line">        <span class="attr">android:state_enabled</span>=<span class="string">"true"</span></span><br><span class="line">        <span class="attr">android:state_pressed</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">objectAnimator</span></span><br><span class="line">                <span class="attr">android:duration</span>=<span class="string">"@android:integer/config_shortAnimTime"</span></span><br><span class="line">                <span class="attr">android:propertyName</span>=<span class="string">"translationZ"</span></span><br><span class="line">                <span class="attr">android:valueTo</span>=<span class="string">"6dp"</span></span><br><span class="line">                <span class="attr">android:valueType</span>=<span class="string">"floatType"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">objectAnimator</span></span><br><span class="line">                <span class="attr">android:duration</span>=<span class="string">"@android:integer/config_shortAnimTime"</span></span><br><span class="line">                <span class="attr">android:propertyName</span>=<span class="string">"translationZ"</span></span><br><span class="line">                <span class="attr">android:valueTo</span>=<span class="string">"0"</span></span><br><span class="line">                <span class="attr">android:valueType</span>=<span class="string">"floatType"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">selector</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>即通过属性动画动态改变translationZ值，沿着Z轴，从0dp到6dp变化。这里的6dp值也是有出处的，参考<a href="https://github.com/google/iosched/blob/master/android/src/main/res/values/dimens.xml#L122" target="_blank" rel="external">Google I/O 2014 app</a>和<a href="https://developer.android.com/training/material/shadows-clipping.html#Elevation" target="_blank" rel="external">Assign Elevation to Your Views</a>。然后将其赋值给<code>android:stateListAnimator</code>属性即可。由于<code>stateListAnimator</code>属性只适用于Lollipop及以上版本，为了隐藏xml中的版本警告，可以指定<code>tools:targetApi=&quot;lollipop&quot;</code>。</p>
<p>关于这个功能，需要补充说明一点。这里的<code>lift_on_touch.xml</code>，严格意义上来讲，属于anim资源，同时适用于API 21及以上版本，所以按道理上来讲应该将其放置在<code>res/anim-v21</code>目录下，然后使用<code>@anim/lift_on_touch</code>赋值给<code>stateListAnimator</code>属性，而不是例子中的<code>@drawable/lift_on_touch</code>方法。但是放置在<code>res/anim-v21</code>目录下会产生一个“错误”提示：</p>
<blockquote>
<p><selector> XML file should be in either “animator” or “drawable”,not “anim”</selector></p>
</blockquote>
<p>虽然这个“错误”不影响编译运行，但是对于追求完美主义的程序员们来说还是碍眼，所以本例中我选择将其放在了<code>res/drawable</code>目录下，大家可以自行斟酌使用。</p>
<p>关于对lift-on-touch效果的理解，YouToBe网站有个视频解说，感兴趣的话可以参看看，地址如下：</p>
<p><a href="https://www.youtube.com/watch?v=YaG_ljfzeUw" target="_blank" rel="external">DesignBytes: Paper and Ink: The Materials that Matter</a></p>
<h1 id="总结说明"><a href="#总结说明" class="headerlink" title="总结说明"></a>总结说明</h1><hr>
<p>CardView还有一些其他属性可供使用，比如<code>cardElevation</code>设置阴影大小，<code>contentPadding</code>代替普通<code>android:padding</code>属性等，比较基础，本文就不一一介绍了，大家可以在官网上参考学习。从上面的介绍可以看出，在使用CardView时基本上都会用到一些标准配置的属性，我们可以借助style属性，将其封装到<code>styles.xml</code>文件中，统一管理，比如：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"AppCardView"</span> <span class="attr">parent</span>=<span class="string">"@style/CardView.Light"</span>&gt;</span><span class="xml"></span><br><span class="line">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"cardPreventCornerOverlap"</span>&gt;</span>false<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"cardUseCompatPadding"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:foreground"</span>&gt;</span>?attr/selectableItemBackground<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:stateListAnimator"</span> <span class="attr">tools:targetApi</span>=<span class="string">"lollipop"</span>&gt;</span>@anim/lift_up<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line">        ......</span><br><span class="line"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>最后，附上本文案例项目的GitHub地址：</p>
<p><a href="https://github.com/Mike-bel/MDStudySamples" target="_blank" rel="external">https://github.com/Mike-bel/MDStudySamples</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Material design中有一种很个性的设计概念：卡片式设计（Cards），这种设计与传统的List Item有所区别，Cards包含更多的内容元素和拥有自己的UI特征，关于Cards的设计规范可以参考官网介绍：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://material.google.com/components/cards.html#&quot;&gt;https://material.google.com/components/cards.html#&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;为了更好地实现这种 Cards UI 的设计，Google在v7包中引进了一种全新的控件：&lt;a href=&quot;https://developer.android.com/reference/android/support/v7/widget/CardView.html#&quot;&gt;CardVew&lt;/a&gt;，本文将从开发的角度介绍CardView的一些常见使用细节。&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://yifeng.studio/categories/Android/"/>
    
    
      <category term="Android" scheme="http://yifeng.studio/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Android Tools Attributes，让布局设计所见即所得</title>
    <link href="http://yifeng.studio/2016/10/13/android-tools-attributes/"/>
    <id>http://yifeng.studio/2016/10/13/android-tools-attributes/</id>
    <published>2016-10-13T10:49:44.000Z</published>
    <updated>2016-10-13T15:05:59.000Z</updated>
    
    <content type="html"><![CDATA[<p>开发人员在设计Android Layout布局时，总会伴随着一些乱七八槽的困扰。比如，为了更加逼真的真实数据预览效果，我们在开发时会将TextView的text属性写上一些假数据，而当运行到模拟器或真机上时这些假数据就成了造成体验上甚至测试BUG的脏数据，又需要一一清除。再比如，我们想在XML的预览界面上就看到ListView的Item内容，而不是只有通过编译运行时才能查看。等等，诸如这些存在于开发Layout内容阶段的困扰，都可以通过Tools Attributes得以解决，不妨了解一下。</p>
<a id="more"></a>
<h1 id="xmlns-定义"><a href="#xmlns-定义" class="headerlink" title="xmlns 定义"></a>xmlns 定义</h1><hr>
<p>Android提供了一种特殊的tools命名空间，来帮助开发人员在开发Layout布局时使用tools属性解决实时预览等问题。这种属性在应用打包运行时将会被忽略，不产生任何影响。tools命名空间的URI为：<code>http://schemas.android.com/tools</code>，通常可将其定义在Layout的根容器中（在Android Studio中，可利用Live Temples快捷方式，输入toolsNs即可对应提示），如：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">RelativeLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span><br><span class="line">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></span><br><span class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span><br><span class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>这里将Tools Attributes按照功能分为两种类别，一种是去除Lint提示的，一种是展示布局预览的，下面一一介绍相关属性的使用。</p>
<h1 id="Lint-提示"><a href="#Lint-提示" class="headerlink" title="Lint 提示"></a>Lint 提示</h1><hr>
<p><strong>tools:ignore</strong></p>
<p>这个属性用于告诉<a href="http://tools.android.com/tips/lint-checks" target="_blank" rel="external">Android Lint</a>忽视某些xml警告，比如平时使用ImageView的时候都要加上这么一句：<code>android:contentDescription=&quot;@null&quot;</code>，否则便会出现黄色警告：[Accessibility] Missing contentDescription attribute on image，此时就可以使用<code>tools:ignore</code>属性忽视这个警告：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ImageView</span></span><br><span class="line">	<span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span><br><span class="line">	<span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span><br><span class="line">	<span class="attr">tools:ignore</span>=<span class="string">"contentDescription"</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>tools:targetApi</strong></p>
<p>类似Java代码中的<code>@TargetApi</code>注解一样，指定API级别，可以使用数字level，也可以直接用API name，比如elevation属性只能在API 21及更高版本使用，使用<code>tools:targetApi</code>属性可以忽视版本的警告：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ImageView</span></span><br><span class="line">	<span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span><br><span class="line">	<span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span><br><span class="line">	<span class="attr">tools:targetApi</span>=<span class="string">"LOLLIPOP"</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>tools:locale</strong></p>
<p>指定IDE当前的假定本地语言，可用在资源文件的根元素上，比如用在<code>values/strings.xml</code>上，避免一些拼写语法上的检查：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resources</span> <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></span><br><span class="line">    <span class="attr">tools:local</span>=<span class="string">"es"</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- string --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"name"</span>&gt;</span>nombre<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="布局预览"><a href="#布局预览" class="headerlink" title="布局预览"></a>布局预览</h1><hr>
<p>这里也分为两种，一种是替换标准的android命名空间的控件固有属性，举个例子：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">TextView</span></span><br><span class="line">	<span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></span><br><span class="line">	<span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span><br><span class="line">	<span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span><br><span class="line">	<span class="attr">tools:text</span>=<span class="string">"Samples"</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<p>上例中使用tools:text替换了android:text标准属性，在design窗口预览时可以看到TextView的text内容，而运行时则会被忽略。诸如此类，其他android标准属性均可被替换以达到预览效果。另一种就是非android标准属性了，下面一一说明。</p>
<p><strong>tools:context</strong></p>
<p>这个属性用在layout文件的根元素上，指明与当前layout相关联的Activity，从而在预览时使用Activity的主题（theme一般定义在Manifest文件中并且与activities联系在一起，而非layout）。可以使用Activity的全名，也可以利用manifest中定义的包名作为前缀：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">RelativeLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span><br><span class="line">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></span><br><span class="line">    <span class="attr">tools:context</span>=<span class="string">".MainActivity"</span></span><br><span class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span><br><span class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>tools:layout</strong></p>
<p>这个属性主要用于<fragment>标签中，指定预览时用的layout布局文件内容：</fragment></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">fragment</span></span><br><span class="line">	<span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span><br><span class="line">	<span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span><br><span class="line">	<span class="attr">tools:layout</span>=<span class="string">"@layout/fragment_content"</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>tools:listitem／listheader／listfooter</strong></p>
<p>顾名思义，这三个属性可用于诸如ListView、GridView、ExpandableListView等AdapterView的子类中，实现内容布局的预览。注意：经实践，在Android Studio中已经无法达到这些元素的内容预览效果，但<code>tools:listitem</code>属性可以用在<code>RecyclerView</code>中，比如：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">android.support.v7.widget.RecyclerView</span></span><br><span class="line">	<span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span><br><span class="line">	<span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span><br><span class="line">	<span class="attr">tools:listitem</span>=<span class="string">"@android:layout/simple_list_item_checked"</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<p>RecyclerView使用tools:listitem的前后对比预览效果如下：</p>
<p><img src="http://ocq7gtgqu.bkt.clouddn.com/tools-listitem.png" alt="tools-listitem"></p>
<p><strong>tools:showIn</strong></p>
<p>这个属性用在<include>标签所包含的layout的根元素上，指定一个<include>所在的布局文件，这样在被嵌套的layout的design视图中便可以预览到外层的layout内容。比如在activity_main.xml中使用<code>&lt;include&gt;</code>标签嵌套一个include_content.xml文件，那么在include_content.xml文件的根元素中就可以使用<code>tools:showIn</code>属性指定Outer layout，达到在include_content.xml文件中预览activity_main.xml内容的效果：</include></include></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">RelativeLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span><br><span class="line">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></span><br><span class="line">    <span class="attr">tools:showIn</span>=<span class="string">"@layout/activity_main"</span></span><br><span class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span><br><span class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>tools:menu</strong></p>
<p>这个属性用在layout根元素中，指定layout预览时ActionBar展示的menu内容。使用<code>tools:context</code>属性时，ActionBar会自动查找Activity中的<code>onCreateOptionsMenu()</code>方法预览menu，<code>tools:menu</code>属性的设置会覆盖<code>tools:context</code>属性的效果。<code>tools:menu</code>的值只需要使用menu文件的名字即可，多个menu使用逗号隔开，如</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">RelativeLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span><br><span class="line">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></span><br><span class="line">    <span class="attr">tools:menu</span>=<span class="string">"menu1,menu2"</span></span><br><span class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span><br><span class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>tools:actionBarNavMode</strong></p>
<p>这个属性用在layout根元素中，指定layout预览时ActonBar的导航模式，值有standard、list和tabs三种，如：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">RelativeLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span><br><span class="line">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></span><br><span class="line">    <span class="attr">tools:actionBarNavMode</span>=<span class="string">"standard"</span></span><br><span class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span><br><span class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>ActionBar不同navigation mode下的预览效果如图所示，关于navigation mode的相关信息可参考<a href="http://developer.android.com/design/patterns/app-structure.html#top-level-switching" target="_blank" rel="external">Top Level Switching With View Controls</a>：</p>
<p><img src="http://ocq7gtgqu.bkt.clouddn.com/actionBarNavMode.png" alt="navigation mode"></p>
<p><strong>tools:shrinkMode／keep／discard</strong></p>
<p>为了使APK文件尽可能地变小，一般在打包发布时会开启Shrink Code和Shrink Resources的功能，删除项目中无用的代码和资源，使用这三个属性可以指定某些resources的保留与删除，具体信息可以参考官网介绍：<a href="https://developer.android.com/studio/build/shrink-code.html" target="_blank" rel="external">Shrink Your Code and Resources</a>。</p>
<h1 id="官方参考"><a href="#官方参考" class="headerlink" title="官方参考"></a>官方参考</h1><hr>
<p>以上便是笔者对于Android Tools Attributes的一些理解和实践，英文较好的也可以直接参考官方介绍，地址如下：</p>
<p><a href="http://tools.android.com/tech-docs/tools-attributes" target="_blank" rel="external">http://tools.android.com/tech-docs/tools-attributes</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;开发人员在设计Android Layout布局时，总会伴随着一些乱七八槽的困扰。比如，为了更加逼真的真实数据预览效果，我们在开发时会将TextView的text属性写上一些假数据，而当运行到模拟器或真机上时这些假数据就成了造成体验上甚至测试BUG的脏数据，又需要一一清除。再比如，我们想在XML的预览界面上就看到ListView的Item内容，而不是只有通过编译运行时才能查看。等等，诸如这些存在于开发Layout内容阶段的困扰，都可以通过Tools Attributes得以解决，不妨了解一下。&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://yifeng.studio/categories/Android/"/>
    
    
      <category term="Android" scheme="http://yifeng.studio/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Android Toolbar，你想知道的都在这里了</title>
    <link href="http://yifeng.studio/2016/10/12/android-toolbar/"/>
    <id>http://yifeng.studio/2016/10/12/android-toolbar/</id>
    <published>2016-10-12T03:11:56.000Z</published>
    <updated>2016-10-12T03:27:31.000Z</updated>
    
    <content type="html"><![CDATA[<p>Android 3.0之后，Google引入了ActionBar，想统一安卓应用的导航栏样式。但由于ActionBar难以定制，很大程度上限制了开发人员，比如标题文字大小、间距等不易实现个性化，很多开发者放弃了ActionBar的使用，而是使用普通的ViewGroup来封装自己的App Bar，或者使用<a href="https://github.com/JakeWharton" target="_blank" rel="external">JakeWharton大神</a>的<a href="https://github.com/JakeWharton/ActionBarSherlock" target="_blank" rel="external">ActionBarSherlock</a>库。</p>
<a id="more"></a>
<p>后来，自2014年Google I/O 上Material Design横空出世后，市场上的应用又逐步趋向了样式的风格统一，support library中很快就出来了Toolbar控件，一个定制化的ViewGroup，来完善ActionBar的使用，App Bar又迎来了春天。</p>
<h1 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h1><hr>
<p>第一步，在Theme中隐藏现有的ActionBar，有以下两种方式：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"AppTheme.Base"</span> <span class="attr">parent</span>=<span class="string">"Theme.AppCompat"</span>&gt;</span><span class="xml"></span><br><span class="line">	<span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"windowActionBar"</span>&gt;</span>false<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:windowNoTitle"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line">	......</span><br><span class="line"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>或者</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"AppTheme.Base"</span> <span class="attr">parent</span>=<span class="string">"heme.AppCompat.Light.NoActionBar"</span>&gt;</span><span class="undefined"></span><br><span class="line">	......</span><br><span class="line"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>第二步，在布局中添加v7包中的Toolbar控件（注意在<code>builde.gradle</code>文件中添加support.v7包的依赖：compile ‘com.android.support:appcompat-v7:23.3.0’），如：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">android.support.v7.widget.Toolbar</span></span><br><span class="line">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></span><br><span class="line">    <span class="attr">android:id</span>=<span class="string">"@+id/tb_toolbar"</span></span><br><span class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span><br><span class="line">    <span class="attr">android:layout_height</span>=<span class="string">"?attr/actionBarSize"</span></span><br><span class="line">    <span class="attr">app:title</span>=<span class="string">"@string/app_name"</span></span><br><span class="line">    <span class="attr">app:titleTextColor</span>=<span class="string">"@android:color/white"</span></span><br><span class="line">    <span class="attr">android:background</span>=<span class="string">"@color/colorPrimary"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">android.support.v7.widget.Toolbar</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>第三步，在Activity代码中使用Toolbar对象替换ActionBar：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Toolbar mToolbarTb = (Toolbar) findViewById(R.id.tb_toolbar);</span><br><span class="line">setSupportActionBar(mToolbarTb);</span><br></pre></td></tr></table></figure>
<p>效果如下：</p>
<p><img src="http://ocq7gtgqu.bkt.clouddn.com/toolbar-sample-01.png" alt="oolbar-sample-01.png"></p>
<p>诸如logo、title、subTitle、navigationIcon等，都可以通过<code>app:xxx</code>属性和Java代码来控制。titleTextAppearance、subtitleTextAppearance也可以用来控制标题颜色和大小，如：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"Theme.ToolBar.Base.Title"</span> <span class="attr">parent</span>=<span class="string">"@style/TextAppearance.Widget.AppCompat.Toolbar.Title"</span>&gt;</span><span class="xml"></span><br><span class="line">	<span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:textSize"</span>&gt;</span>18sp<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:textColor"</span>&gt;</span>@android:color/white<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="Options-Menu"><a href="#Options-Menu" class="headerlink" title="Options Menu"></a>Options Menu</h1><hr>
<p>与ActionBar的用法一致，在menu资源目录下新建一个<code>search.xml</code>文件，添加menu内容，如：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">menu</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span><br><span class="line">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span></span><br><span class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/action_search"</span></span><br><span class="line">        <span class="attr">android:title</span>=<span class="string">"search"</span></span><br><span class="line">        <span class="attr">android:icon</span>=<span class="string">"@android:drawable/ic_menu_search"</span></span><br><span class="line">        <span class="attr">app:showAsAction</span>=<span class="string">"collapseActionView"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">menu</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>在Java代码中添加为Toolbar添加对应的Menu Item，并设置点击事件，如：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onCreateOptionsMenu</span><span class="params">(Menu menu)</span> </span>&#123;</span><br><span class="line">    getMenuInflater().inflate(R.menu.search, menu);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">super</span>.onCreateOptionsMenu(menu);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onOptionsItemSelected</span><span class="params">(MenuItem item)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (item.getItemId()) &#123;</span><br><span class="line">        <span class="keyword">case</span> R.id.action_search:</span><br><span class="line">            <span class="comment">//TODO search</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">super</span>.onOptionsItemSelected(item);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>效果如下：</p>
<p><img src="http://ocq7gtgqu.bkt.clouddn.com/toolbar-sample-02.png" alt="toolbar-sample-02"></p>
<p>如图，溢出按钮的颜色是黑色，那么怎么修改成与主题色搭配的白色呢？可以通过修改Toolbar的theme和popupTheme属性来改变，在Toolbar中添加如下属性：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">android.support.v7.widget.Toolbar</span></span><br><span class="line">    <span class="attr">......</span></span><br><span class="line">    <span class="attr">app:popupTheme</span>=<span class="string">"@style/ThemeOverlay.AppCompat.Light"</span></span><br><span class="line">    <span class="attr">app:theme</span>=<span class="string">"@style/ThemeOverlay.AppCompat.Dark.ActionBar"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">android.support.v7.widget.Toolbar</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>还有另一种方式，就是使用theme中的<code>actionMenuTextColor</code>属性设置Menu Item的字体颜色，如：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"OverFlowMenuTheme"</span> <span class="attr">parent</span>=<span class="string">"Theme.AppCompat.NoActionBar"</span>&gt;</span><span class="xml"></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:actionMenuTextColor"</span>&gt;</span>@android:color/white<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"overlapAnchor"</span>&gt;</span>false<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>Toolbar中的相关theme设置如下：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">android.support.v7.widget.Toolbar</span></span><br><span class="line">    <span class="attr">......</span></span><br><span class="line">    <span class="attr">app:popupTheme</span>=<span class="string">"@style/OverFlowMenuTheme"</span></span><br><span class="line">    <span class="attr">app:theme</span>=<span class="string">"@style/ThemeOverlay.AppCompat.Dark.ActionBar"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">android.support.v7.widget.Toolbar</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>一般也是采用这种做法，将Toolbar相关属性集中写到一个style中，比如：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"OverFlowMenuTheme"</span> <span class="attr">parent</span>=<span class="string">"Theme.AppCompat.NoActionBar"</span>&gt;</span><span class="xml"></span><br><span class="line">    <span class="comment">&lt;!-- 设置Menu菜单的背景色 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:itemBackground"</span>&gt;</span>@android:color/white<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 设置Menu菜单的字体颜色 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:textColorPrimary"</span>&gt;</span>@android:color/black<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 设置Menu窗口不覆盖Toolbar视图 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"overlapAnchor"</span>&gt;</span>false<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>这样设置下的效果如下图所示：</p>
<p><img src="http://ocq7gtgqu.bkt.clouddn.com/toolbar-sample-04.png" alt="toolbar-sample-04.png"></p>
<h1 id="Up-Enable"><a href="#Up-Enable" class="headerlink" title="Up Enable"></a>Up Enable</h1><hr>
<p>在二级界面等Activity中，通过如下设置可以在Toolbar左边显示一个返回按钮：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">getSupportActionBar().setDisplayHomeAsUpEnabled(<span class="keyword">true</span>);</span><br></pre></td></tr></table></figure>
<p>然后通过<code>android.R.id.home</code>监听返回按钮的点击事件，比如可以返回上级Activity中：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onOptionsItemSelected</span><span class="params">(MenuItem item)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (item.getItemId()) &#123;</span><br><span class="line">        <span class="keyword">case</span> android.R.id.home:</span><br><span class="line">            finish();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">super</span>.onOptionsItemSelected(item);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当然，也可以通过为Toolbar设置导航图标的点击事件来达到这个监听效果：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mToolbarTb.setNavigationOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">		finish();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>显示效果如下：</p>
<p><img src="http://ocq7gtgqu.bkt.clouddn.com/toolbar-sample-05.png" alt="toolbar-sample-05.png"></p>
<p>至于导航返回按钮的图标，可以通过<code>mToolbarTb.setNavigationIcon</code>方法或者<code>app:navigationIcon</code>属性来修改。</p>
<h1 id="标题居中"><a href="#标题居中" class="headerlink" title="标题居中"></a>标题居中</h1><hr>
<p>前面我们说过，Toolbar就是一个定制化的ViewGroup，所以可以在Toolbar里面放置一个TextView控件作为居中的标题来使用，再将Toolbar的Title隐藏起来即可实现Toolbar标题居中的效果，如：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">android.support.v7.widget.Toolbar</span></span><br><span class="line">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></span><br><span class="line">    <span class="attr">android:id</span>=<span class="string">"@+id/tb_toolbar"</span></span><br><span class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span><br><span class="line">    <span class="attr">android:layout_height</span>=<span class="string">"?attr/actionBarSize"</span></span><br><span class="line">    <span class="attr">app:popupTheme</span>=<span class="string">"@style/OverFlowMenuTheme"</span></span><br><span class="line">    <span class="attr">app:theme</span>=<span class="string">"@style/ThemeOverlay.AppCompat.Dark.ActionBar"</span></span><br><span class="line">    <span class="attr">android:background</span>=<span class="string">"@color/colorPrimary"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span><br><span class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span><br><span class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span><br><span class="line">        <span class="attr">android:layout_gravity</span>=<span class="string">"center"</span></span><br><span class="line">        <span class="attr">android:text</span>=<span class="string">"SecondActivity"</span></span><br><span class="line">        <span class="attr">style</span>=<span class="string">"@style/TextAppearance.AppCompat.Widget.ActionBar.Title"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">android.support.v7.widget.Toolbar</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>这里给TextView设置了style属性，与<code>ActionBar.Title</code>保持一致，然后还需要去除Toolbar自有的Title，在布局中使用<code>app:title=&quot;&quot;</code>是不会起作用的，会显示ActionBar的标题，所以在代码中隐藏ActionBar的标题即可：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">getSupportActionBar().setDisplayShowTitleEnabled(<span class="keyword">false</span>);</span><br></pre></td></tr></table></figure>
<p>效果如下：</p>
<p><img src="http://ocq7gtgqu.bkt.clouddn.com/toolbar-sample-06.png" alt="toolbar-sample-06.png"></p>
<h1 id="Fragment中使用"><a href="#Fragment中使用" class="headerlink" title="Fragment中使用"></a>Fragment中使用</h1><hr>
<p>有时候需要在Fragment中使用Toolbar，比如Activity中不同的Tab显示不同的Fragment，同时每个Tab的Toolbar标题、Menu均不相同，这时在Activity中使用同一个Toolbar就相当不方便了。我们可以在每个Fragment的布局中添加各自的Toolbar，然后在Fragment中单独控制。</p>
<p>与Activity中使用Toolbar有所不同。替换ActionBar时，需要给<code>setSupportActionBar</code>方法添加作用对象：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">((AppCompatActivity)getActivity()).setSupportActionBar((Toolbar) mContentView.findViewById(R.id.tb_toolbar));</span><br></pre></td></tr></table></figure>
<p>添加Options Menu时，需要额外调用<code>setHasOptionsMenu(true);</code>方法，确保<code>onCreateOptionsMenu()</code>方法得以调用，并且<code>onCreateOptionsMenu()</code>方法多了一个<code>MenuInflater</code>参数：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreateOptionsMenu</span><span class="params">(Menu menu, MenuInflater inflater)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">super</span>.onCreateOptionsMenu(menu, inflater);</span><br><span class="line">	inflater.inflate(R.menu.search, menu);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="相关知识"><a href="#相关知识" class="headerlink" title="相关知识"></a>相关知识</h1><hr>
<p>关于Toolar的更多介绍可以从官网中学习借鉴，链接为：<a href="https://developer.android.com/training/appbar/index.html" target="_blank" rel="external">Adding the App Bar | Android Developers</a>。从其使用上可以看出，Toolbar是ActionBar的一种替代解决方案，所以很多用法均可参考ActionBar，大家可以从郭神的译文中掌握ActionBar的相关用法：</p>
<ul>
<li><p><a href="http://blog.csdn.net/guolin_blog/article/details/18234477" target="_blank" rel="external">Android ActionBar完全解析，使用官方推荐的最佳导航栏(上)</a></p>
</li>
<li><p><a href="http://blog.csdn.net/guolin_blog/article/details/25466665" target="_blank" rel="external">Android ActionBar完全解析，使用官方推荐的最佳导航栏(下)</a></p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Android 3.0之后，Google引入了ActionBar，想统一安卓应用的导航栏样式。但由于ActionBar难以定制，很大程度上限制了开发人员，比如标题文字大小、间距等不易实现个性化，很多开发者放弃了ActionBar的使用，而是使用普通的ViewGroup来封装自己的App Bar，或者使用&lt;a href=&quot;https://github.com/JakeWharton&quot;&gt;JakeWharton大神&lt;/a&gt;的&lt;a href=&quot;https://github.com/JakeWharton/ActionBarSherlock&quot;&gt;ActionBarSherlock&lt;/a&gt;库。&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://yifeng.studio/categories/Android/"/>
    
    
      <category term="Android" scheme="http://yifeng.studio/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Android include和merge标签、ViewStub控件的使用总结</title>
    <link href="http://yifeng.studio/2016/10/08/android-include-merge-viewstub/"/>
    <id>http://yifeng.studio/2016/10/08/android-include-merge-viewstub/</id>
    <published>2016-10-08T07:15:43.000Z</published>
    <updated>2016-10-09T03:06:17.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="lt-inlcude-gt-标签"><a href="#lt-inlcude-gt-标签" class="headerlink" title="&lt;inlcude&gt;标签"></a><code>&lt;inlcude&gt;</code>标签</h1><p>在开发Android布局时，常将一些通用的视图提取到一个单独的layout文件中，然后使用<code>&lt;include&gt;</code>标签在需要使用的其他layout布局文件中加载进来，比如App导航栏等。这样，便于对相同视图内容进行统一的控制管理，提高布局重用性。然而，使用<code>&lt;include&gt;</code>标签总有一些值得我们注意的地方。</p>
<a id="more"></a>
<h2 id="根容器id与include-id必须相同"><a href="#根容器id与include-id必须相同" class="headerlink" title="根容器id与include id必须相同"></a>根容器id与include id必须相同</h2><p>如果我们给include所加载的layout布局的根容器设置了id属性，也在include标签中设置了id属性，同时需要在代码中获取根容器的控件对象时，一定要将这两个id设置相同的名称！否则，将获取不到根容器对象，即为null。举个例子：</p>
<p>我们将应用中的Toolbar提取到一个include_toolbar.xml文件中，并设置了Toolbar设置了id属性：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">android.support.v7.widget.Toolbar</span></span><br><span class="line">    <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span><br><span class="line">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></span><br><span class="line">    <span class="attr">android:id</span>=<span class="string">"@+id/tb_toolbar"</span></span><br><span class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span><br><span class="line">    <span class="attr">android:layout_height</span>=<span class="string">"?attr/actionBarSize"</span></span><br><span class="line">    <span class="attr">app:titleTextColor</span>=<span class="string">"@android:color/white"</span></span><br><span class="line">    <span class="attr">app:title</span>=<span class="string">""</span></span><br><span class="line">    <span class="attr">app:theme</span>=<span class="string">"@style/AppTheme"</span></span><br><span class="line">    <span class="attr">android:background</span>=<span class="string">"@color/blue"</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<p>然后在其他布局文件activity_main.xml中使用include标签加载上述Toolbar视图，同时由于相对布局的需要而将include标签设置了相同值的id属性：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">RelativeLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span><br><span class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span><br><span class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!-- 这里的id属性一定要与layout属性所加载的include_toolbar.xml布局的根容器设置相同的值！ --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span></span><br><span class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/tb_toolbar"</span></span><br><span class="line">        <span class="attr">layout</span>=<span class="string">"@layout/include_toolbar"</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<p>最后在代码文件MainActivity.java中获取Toolbar对象：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">     setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果include布局根容器和include标签中的id设置的是不同的值，这里获取的mToolbar值将为null</span></span><br><span class="line">     Toolbar mToolbar = (Toolbar) findViewById(R.id.tb_toolbar);</span><br><span class="line">     setSupportActionBar(mToolbar);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<h2 id="宽高属性与其他属性的联合使用"><a href="#宽高属性与其他属性的联合使用" class="headerlink" title="宽高属性与其他属性的联合使用"></a>宽高属性与其他属性的联合使用</h2><p>在使用include标签时，除了使用layout属性加载布局文件时，一般不需要设置其他属性了，比如：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span><br><span class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span><br><span class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span><br><span class="line">    <span class="attr">android:orientation</span>=<span class="string">"vertical"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span></span><br><span class="line">        <span class="attr">layout</span>=<span class="string">"@layout/include_toolbar"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    ......</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>但有时为了布局的需要，仍要使用诸如<code>layout_margin</code>等除id之外的其他属性，这时就要注意，为了使这些其他属性起作用，必须同时设置include标签的宽高属性，如：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span><br><span class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span><br><span class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span><br><span class="line">    <span class="attr">android:orientation</span>=<span class="string">"vertical"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span></span><br><span class="line">        <span class="attr">layout</span>=<span class="string">"@layout/include_toolbar"</span></span><br><span class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span><br><span class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span><br><span class="line">        <span class="attr">android:layout_margin</span>=<span class="string">"8dp"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    ......</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="lt-merge-gt-标签"><a href="#lt-merge-gt-标签" class="headerlink" title="&lt;merge&gt;标签"></a><code>&lt;merge&gt;</code>标签</h1><p><code>&lt;merge&gt;</code>标签存在的意义是帮助<code>&lt;include&gt;</code>标签排除多余的一层ViewGroup容器，减少view hierarchy的结构，提升UI performance。<a href="https://developer.android.com/training/improving-layouts/reusing-layouts.html" target="_blank" rel="external">Developers官网</a>举了一个很好的例子，大家可以自行查看一下，总结其意思就是，在主界面中，<code>&lt;include&gt;</code>标签的parent ViewGroup与包含的layout根容器ViewGroup是相同的类型，那么则可以将包含的layout根容器ViewGroup使用<code>&lt;merge&gt;</code>标签代替，从而减少一层ViewGroup的嵌套，从而提升UI性能渲染。举个例子就是：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">merge</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- re-used views --&gt;</span></span><br><span class="line">    ......</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">merge</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>然后再在其他界面中使用<code>&lt;include&gt;</code>标签加载重用布局文件即可。</p>
<h1 id="ViewStub控件"><a href="#ViewStub控件" class="headerlink" title="ViewStub控件"></a>ViewStub控件</h1><p>android.view.ViewStub也可以用来加载布局文件，但与include标签完全不同。ViewStub是一个不可见的View类，用于在运行时按需懒加载资源，只有在代码中调用了<code>viewStub.inflate()</code>或者<code>viewStub.setVisible(View.visible)</code>方法时才内容才变得可见。这里需要注意的一点是，当ViewStub被inflate到parent时，ViewStub就被remove掉了，即当前view hierarchy中不再存在ViewStub，而是使用对应的layout视图代替。ViewStub有几个属性和方法值得说明一下：</p>
<ul>
<li><p><code>android:layout</code>属性<br>加载包含的layout布局文件；</p>
</li>
<li><p><code>android:inflatedId</code>属性<br>重写包含的layout布局文件的根容器id；</p>
</li>
<li><p><code>inflate()</code>方法<br>与<code>setVisible(int)</code>方法作用类似，都可以使内容得以显示，只是<code>inflate()</code>会返回一个View对象，避免了额外使用<code>findViewById()</code>方法获取layout视图对象。</p>
</li>
</ul>
<p>举个例子说明一下，按需加载的<code>viewstub_content.xml</code>内容如下（这里只是个例子，只有一个TextView，实际使用中一定是一个复杂的布局才用得上ViewStub）：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span><br><span class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span><br><span class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span><br><span class="line">    <span class="attr">android:gravity</span>=<span class="string">"center"</span></span><br><span class="line">    <span class="attr">android:orientation</span>=<span class="string">"vertical"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span><br><span class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span><br><span class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span><br><span class="line">        <span class="attr">android:text</span>=<span class="string">"Content"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>Activity界面布局文件<code>activity_main.xml</code>内容如下，只有一个Button按钮和ViewStub控件:</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span><br><span class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span><br><span class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span><br><span class="line">    <span class="attr">android:orientation</span>=<span class="string">"vertical"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span></span><br><span class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span><br><span class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span><br><span class="line">        <span class="attr">android:layout_gravity</span>=<span class="string">"center_horizontal"</span></span><br><span class="line">        <span class="attr">android:text</span>=<span class="string">"Show"</span></span><br><span class="line">        <span class="attr">android:onClick</span>=<span class="string">"onClick"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">ViewStub</span></span><br><span class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/vs_viewStub"</span></span><br><span class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span><br><span class="line">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span><br><span class="line">        <span class="attr">android:layout</span>=<span class="string">"@layout/viewstub_content"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>对应的java代码如下，点击按钮显示ViewStub的内容：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">    View view = ((ViewStub) findViewById(R.id.vs_viewStub)).inflate();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>点击按钮，即可显示ViewStub的内容。我们用<code>Hierarchy View</code>观察一下视图层次的情况，当Activity初始化时，视图结构如下：</p>
<p><img src="http://ocq7gtgqu.bkt.clouddn.com/ViewStub-Samles-01.png" alt="ViewStub-Samles-01"></p>
<p>可以看到，当前view hierarchy中存在的是ViewStub而不是包含的layout布局。点击一下按钮，显示内容，再看一下：</p>
<p><img src="http://ocq7gtgqu.bkt.clouddn.com/ViewStub-Samles-02.png" alt="ViewStub-Samles-01"></p>
<p>ViewStub已经remove掉了，而包含的layout布局加入到当前view hierarchy中，即无法使用<code>findViewById()</code>方法获取ViewStub的引用。</p>
<p>所以，<code>&lt;include&gt;</code>标签与ViewStub完全不是同一个概念，ViewStub自带懒加载特性，可以理解为一个轻量级的View，自身占用资源较小，在UI初始化时所对应的layout布局视图不占用系统资源，从而可以加快当前界面的渲染过程，相比使用普通的<code>view.setVisible(int)</code>方法，性能体验提高不少，而<code>&lt;include&gt;</code>标签则只是用于提高布局的重用性，使用场景大有不同。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;lt-inlcude-gt-标签&quot;&gt;&lt;a href=&quot;#lt-inlcude-gt-标签&quot; class=&quot;headerlink&quot; title=&quot;&amp;lt;inlcude&amp;gt;标签&quot;&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;inlcude&amp;gt;&lt;/code&gt;标签&lt;/h1&gt;&lt;p&gt;在开发Android布局时，常将一些通用的视图提取到一个单独的layout文件中，然后使用&lt;code&gt;&amp;lt;include&amp;gt;&lt;/code&gt;标签在需要使用的其他layout布局文件中加载进来，比如App导航栏等。这样，便于对相同视图内容进行统一的控制管理，提高布局重用性。然而，使用&lt;code&gt;&amp;lt;include&amp;gt;&lt;/code&gt;标签总有一些值得我们注意的地方。&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://yifeng.studio/categories/Android/"/>
    
    
      <category term="Android" scheme="http://yifeng.studio/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Android 一步一步分析CoordinatorLayout.Behavior</title>
    <link href="http://yifeng.studio/2016/09/23/behavior-analyzation/"/>
    <id>http://yifeng.studio/2016/09/23/behavior-analyzation/</id>
    <published>2016-09-23T14:06:32.000Z</published>
    <updated>2016-09-26T05:29:25.000Z</updated>
    
    <content type="html"><![CDATA[<p>在MD系列的前几篇文章中，通过基础知识和实战案例配合讲解的形式介绍了<code>CoordinatorLayout</code>与<code>AppBarLayout</code>、<code>Toolbar</code>、<code>CollapsingToolbarLayout</code>的使用，并实现了几种MD风格下比较炫酷的交互效果。学会怎么用之后，我们再想想，为什么它们之间能够产生这样的交互行为呢？其实就是因为<code>CoordinatorLayout.Behavior</code>的存在，这也是本文所要讲述的内容。至此，Android Material Design系列的学习已进行到第八篇，大家可以点击以下链接查看之前的文章：</p>
<a id="more"></a>
<ul>
<li><a href="http://www.jianshu.com/p/39a66373498c" target="_blank" rel="external">Android TabLayout 分分钟打造一个滑动标签页</a></li>
<li><a href="http://www.jianshu.com/p/9eb3b17b0e77" target="_blank" rel="external">Android 一文告诉你到底是用Dialog，Snackbar，还是Toast</a></li>
<li><a href="http://www.jianshu.com/p/5328b2eee827" target="_blank" rel="external">Android FloatingActionButton 重要的操作不要太多，一个就好</a></li>
<li><a href="http://www.jianshu.com/p/ab04627cce58" target="_blank" rel="external">Android 初识AppBarLayout 和 CoordinatorLayout</a></li>
<li><a href="http://www.jianshu.com/p/4b0f3c80ebc9" target="_blank" rel="external">Android CoordinatorLayout实战案例学习《一》</a></li>
<li><a href="http://www.jianshu.com/p/360fd368936d" target="_blank" rel="external">Android CoordinatorLayout 实战案例学习《二》</a></li>
<li><a href="http://www.jianshu.com/p/7caa5f4f49bd" target="_blank" rel="external">Android 详细分析AppBarLayout的五种ScrollFlags</a></li>
</ul>
<h1 id="关于Behavior"><a href="#关于Behavior" class="headerlink" title="关于Behavior"></a>关于Behavior</h1><hr>
<p>官网对于<code>CoordinatorLayout.Behavior</code>的介绍已经将它的作用说明得很清楚了，就是用来协调<code>CoordinatorLayout</code>的Child Views之间的交互行为：</p>
<blockquote>
<p>Interaction behavior plugin for child views of CoordinatorLayout.</p>
<p>A Behavior implements one or more interactions that a user can take on a child view. These interactions may include drags, swipes, flings, or any other gestures.</p>
</blockquote>
<p>之前学习<code>CoordinatorLayout</code>的使用案例时，用的都是系统的特定控件，比如design包中的<code>FloatingActionButton</code>、<code>AppBarLayout</code>等，而不是普通的控件，如<code>ImageButton</code>之类的，就是因为design包中的这些特定控件已经被系统默认定义了继承自<code>CoordinatorLayout.Behavior</code>的各种<code>Behavior</code>，比如<code>FloatingActionButton.Behavior</code>和<br><code>AppBarLayout.Behavior</code>。而像系统的<code>ToolBar</code>控件就没有自己的<code>Behavior</code>，所以只能将其搁置到<code>AppBarLayout</code>容器里才能产生相应的交互效果。</p>
<p>看到这里就能清楚一点了，如果我们想实现控件之间任意的交互效果，完全可以通过自定义<code>Behavior</code>的方式达到。看到这里大家可能会有一个疑惑，就是<code>CoordinatorLayout</code>如何获取Child Views的<code>Behavior</code>的呢，为什么在布局中，有些滑动型控件定义了<code>app:layout_behavior</code>属性而系统类似<code>FloatingActionButton</code>的控件则不需要明确定义该属性呢？看完<code>CoordinatorLayout.Behavior</code>的构造函数就明白了。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * Default constructor for instantiating Behaviors.</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Behavior</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * Default constructor for inflating Behaviors from layout. The Behavior will have</span><br><span class="line"> * the opportunity to parse specially defined layout parameters. These parameters will</span><br><span class="line"> * appear on the child view tag.</span><br><span class="line"> *</span><br><span class="line"> * <span class="doctag">@param</span> context</span><br><span class="line"> * <span class="doctag">@param</span> attrs</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Behavior</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>CoordinatorLayout.Behavior</code>有两个构造函数，注意看第二个带参数的构造函数的注释，里面提到，在这个构造函数中，<code>Behavior</code>会解析控件的特殊布局属性，也就是通过<code>parseBehavior</code>方法获取对应的<code>Behavior</code>，从而协调Child Views之间的交互行为，可以在<code>CoordinatorLayout</code>类中查看，具体源码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> Behavior <span class="title">parseBehavior</span><span class="params">(Context context, AttributeSet attrs, String name)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (TextUtils.isEmpty(name)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> String fullName;</span><br><span class="line">    <span class="keyword">if</span> (name.startsWith(<span class="string">"."</span>)) &#123;</span><br><span class="line">        <span class="comment">// Relative to the app package. Prepend the app package name.</span></span><br><span class="line">        fullName = context.getPackageName() + name;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (name.indexOf(<span class="string">'.'</span>) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// Fully qualified package name.</span></span><br><span class="line">        fullName = name;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// Assume stock behavior in this package (if we have one)</span></span><br><span class="line">        fullName = !TextUtils.isEmpty(WIDGET_PACKAGE_NAME)</span><br><span class="line">                ? (WIDGET_PACKAGE_NAME + <span class="string">'.'</span> + name)</span><br><span class="line">                : name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Map&lt;String, Constructor&lt;Behavior&gt;&gt; constructors = sConstructors.get();</span><br><span class="line">        <span class="keyword">if</span> (constructors == <span class="keyword">null</span>) &#123;</span><br><span class="line">            constructors = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">            sConstructors.set(constructors);</span><br><span class="line">        &#125;</span><br><span class="line">        Constructor&lt;Behavior&gt; c = constructors.get(fullName);</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">final</span> Class&lt;Behavior&gt; clazz = (Class&lt;Behavior&gt;) Class.forName(fullName, <span class="keyword">true</span>,</span><br><span class="line">                    context.getClassLoader());</span><br><span class="line">            c = clazz.getConstructor(CONSTRUCTOR_PARAMS);</span><br><span class="line">            c.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">            constructors.put(fullName, c);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> c.newInstance(context, attrs);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Could not inflate Behavior subclass "</span> + fullName, e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>parseBehavior</code>方法告诉我们，给Child Views设置<code>Behavior</code>有两种方式：</p>
<ol>
<li><p><code>app:layout_behavior</code>布局属性<br>在布局中设置，值为自定义<code>Behavior</code>类的名字字符串（包含路径），类似在<code>AndroidManifest.xml</code>中定义四大组件的名字一样，有两种写法，包含包名的全路径和以”.”开头的省略项目包名的路径。</p>
</li>
<li><p><code>@CoordinatorLayout.DefaultBehavior</code>类注解<br>在需要使用<code>Behavior</code>的控件源码定义中添加该注解，然后通过反射机制获取。这个方式就解决了我们前面产生的疑惑，系统的<code>AppBarLayout</code>、<code>FloatingActionButton</code>都采用了这种方式，所以无需在布局中重复设置。</p>
</li>
</ol>
<p>看到这里，也告诉我们一点，在自定义<code>Behavior</code>时，一定要重写第二个带参数的构造函数，否则这个<code>Behavior</code>是不会起作用的。</p>
<p>根据<code>CoordinatorLayout.Behavior</code>提供的方法，这里将自定义<code>Behavior</code>分为两类来讲解，一种是<code>dependent</code>机制，一种是<code>nested</code>机制，对应着不同的使用场景。</p>
<h1 id="dependent机制"><a href="#dependent机制" class="headerlink" title="dependent机制"></a><code>dependent</code>机制</h1><hr>
<p>这种机制描述的是两个Child Views之间的绑定依赖关系，设置<code>Behavior</code>属性的Child View跟随依赖对象Dependency View的大小位置改变而发生变化，对应需要实现的方法常见有两个：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * Determine whether the supplied child view has another specific sibling view as a</span><br><span class="line"> * layout dependency.</span><br><span class="line"> *</span><br><span class="line"> * &lt;p&gt;This method will be called at least once in response to a layout request. If it</span><br><span class="line"> * returns true for a given child and dependency view pair, the parent CoordinatorLayout</span><br><span class="line"> * will:&lt;/p&gt;</span><br><span class="line"> * &lt;ol&gt;</span><br><span class="line"> *     &lt;li&gt;Always lay out this child after the dependent child is laid out, regardless</span><br><span class="line"> *     of child order.&lt;/li&gt;</span><br><span class="line"> *     &lt;li&gt;Call &#123;<span class="doctag">@link</span> #onDependentViewChanged&#125; when the dependency view's layout or</span><br><span class="line"> *     position changes.&lt;/li&gt;</span><br><span class="line"> * &lt;/ol&gt;</span><br><span class="line"> *</span><br><span class="line"> * <span class="doctag">@param</span> parent the parent view of the given child</span><br><span class="line"> * <span class="doctag">@param</span> child the child view to test</span><br><span class="line"> * <span class="doctag">@param</span> dependency the proposed dependency of child</span><br><span class="line"> * <span class="doctag">@return</span> true if child's layout depends on the proposed dependency's layout,</span><br><span class="line"> *         false otherwise</span><br><span class="line"> *</span><br><span class="line"> * <span class="doctag">@see</span> #onDependentViewChanged(CoordinatorLayout, android.view.View, android.view.View)</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">layoutDependsOn</span><span class="params">(CoordinatorLayout parent, V child, View dependency)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>和</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * Respond to a change in a child's dependent view</span><br><span class="line"> *</span><br><span class="line"> * &lt;p&gt;This method is called whenever a dependent view changes in size or position outside</span><br><span class="line"> * of the standard layout flow. A Behavior may use this method to appropriately update</span><br><span class="line"> * the child view in response.&lt;/p&gt;</span><br><span class="line"> *</span><br><span class="line"> * &lt;p&gt;A view's dependency is determined by</span><br><span class="line"> * &#123;<span class="doctag">@link</span> #layoutDependsOn(CoordinatorLayout, android.view.View, android.view.View)&#125; or</span><br><span class="line"> * if &#123;<span class="doctag">@code</span> child&#125; has set another view as it's anchor.&lt;/p&gt;</span><br><span class="line"> *</span><br><span class="line"> * &lt;p&gt;Note that if a Behavior changes the layout of a child via this method, it should</span><br><span class="line"> * also be able to reconstruct the correct position in</span><br><span class="line"> * &#123;<span class="doctag">@link</span> #onLayoutChild(CoordinatorLayout, android.view.View, int) onLayoutChild&#125;.</span><br><span class="line"> * &lt;code&gt;onDependentViewChanged&lt;/code&gt; will not be called during normal layout since</span><br><span class="line"> * the layout of each child view will always happen in dependency order.&lt;/p&gt;</span><br><span class="line"> *</span><br><span class="line"> * &lt;p&gt;If the Behavior changes the child view's size or position, it should return true.</span><br><span class="line"> * The default implementation returns false.&lt;/p&gt;</span><br><span class="line"> *</span><br><span class="line"> * <span class="doctag">@param</span> parent the parent view of the given child</span><br><span class="line"> * <span class="doctag">@param</span> child the child view to manipulate</span><br><span class="line"> * <span class="doctag">@param</span> dependency the dependent view that changed</span><br><span class="line"> * <span class="doctag">@return</span> true if the Behavior changed the child view's size or position, false otherwise</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onDependentViewChanged</span><span class="params">(CoordinatorLayout parent, V child, View dependency)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>具体含义在注释中已经很清楚了，<code>layoutDependsOn()</code>方法用于决定是否产生依赖行为，<code>onDependentViewChanged()</code>方法在依赖的控件发生大小或者位置变化时产生回调。<code>dependent</code>机制最常见的案例就是<code>FloatingActionButton</code>和<code>SnackBar</code>的交互行为，效果如下：</p>
<p><img src="http://ocq7gtgqu.bkt.clouddn.com/behavior-01.gif" alt="Behavior-01"></p>
<p>系统的<code>FloatingActionButton</code>已经默认定义了一个<code>Behavior</code>来协调交互，如果不用系统的FAB控件，比如改用GitHub上的一个库<a href="https://github.com/futuresimple/android-floating-action-button" target="_blank" rel="external"><code>futuresimple/android-floating-action-button</code></a>，再通过自定义一个<code>Behavior</code>，也能很简单的实现与<code>SnackBar</code>的协调效果：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yifeng.mdstudysamples;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.content.Context;</span><br><span class="line"><span class="keyword">import</span> android.support.design.widget.CoordinatorLayout;</span><br><span class="line"><span class="keyword">import</span> android.support.design.widget.Snackbar;</span><br><span class="line"><span class="keyword">import</span> android.util.AttributeSet;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * Created by yifeng on 16/9/20.</span><br><span class="line"> *</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DependentFABBehavior</span> <span class="keyword">extends</span> <span class="title">CoordinatorLayout</span>.<span class="title">Behavior</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DependentFABBehavior</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, attrs);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 判断依赖对象</span><br><span class="line">     * <span class="doctag">@param</span> parent</span><br><span class="line">     * <span class="doctag">@param</span> child</span><br><span class="line">     * <span class="doctag">@param</span> dependency</span><br><span class="line">     * <span class="doctag">@return</span></span><br><span class="line">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">layoutDependsOn</span><span class="params">(CoordinatorLayout parent, View child, View dependency)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dependency <span class="keyword">instanceof</span> Snackbar.SnackbarLayout;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 当依赖对象发生变化时,产生回调,自定义改变child view</span><br><span class="line">     * <span class="doctag">@param</span> parent</span><br><span class="line">     * <span class="doctag">@param</span> child</span><br><span class="line">     * <span class="doctag">@param</span> dependency</span><br><span class="line">     * <span class="doctag">@return</span></span><br><span class="line">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onDependentViewChanged</span><span class="params">(CoordinatorLayout parent, View child, View dependency)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">float</span> translationY = Math.min(<span class="number">0</span>, dependency.getTranslationY() - dependency.getHeight());</span><br><span class="line">        child.setTranslationY(translationY);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>很简单的一个自定义<code>Behavior</code>处理，然后再为对应的Child View设置该属性即可。由于这里我们用的是第三方库，采用远程依赖的形式引入的，无法修改源码，所以不方便使用注解的方式为其设置<code>Behavior</code>，所以在布局中为其设置，并且使用了省略包名的方式：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">android.support.design.widget.CoordinatorLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span><br><span class="line">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></span><br><span class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span><br><span class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">android.support.design.widget.AppBarLayout</span></span><br><span class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/appbar"</span></span><br><span class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span><br><span class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span><br><span class="line">        <span class="attr">android:theme</span>=<span class="string">"@style/ThemeOverlay.AppCompat.Dark.ActionBar"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">include</span></span><br><span class="line">            <span class="attr">layout</span>=<span class="string">"@layout/include_toolbar"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">android.support.design.widget.AppBarLayout</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">com.getbase.floatingactionbutton.FloatingActionButton</span></span><br><span class="line">        <span class="attr">xmlns:fab</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></span><br><span class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/fab_add"</span></span><br><span class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span><br><span class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span><br><span class="line">        <span class="attr">android:layout_margin</span>=<span class="string">"@dimen/dp_16"</span></span><br><span class="line">        <span class="attr">android:layout_gravity</span>=<span class="string">"bottom|right"</span></span><br><span class="line">        <span class="attr">android:onClick</span>=<span class="string">"onClickFab"</span></span><br><span class="line">        <span class="attr">fab:fab_icon</span>=<span class="string">"@mipmap/ic_toolbar_add"</span></span><br><span class="line">        <span class="attr">fab:fab_colorNormal</span>=<span class="string">"?attr/colorPrimary"</span></span><br><span class="line">        <span class="attr">fab:fab_colorPressed</span>=<span class="string">"?attr/colorPrimaryDark"</span></span><br><span class="line">        <span class="attr">app:layout_behavior</span>=<span class="string">".DependentFABBehavior"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">android.support.design.widget.CoordinatorLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>这样，采用<code>dependent</code>机制自定义<code>Behavior</code>，与使用系统FAB按钮一样，即可与<code>SnackBar</code>控件产生如上图所示的协调交互效果。</p>
<p>比如我们再看一下这样一个效果：</p>
<p><img src="http://ocq7gtgqu.bkt.clouddn.com/behavior-03.gif" alt="Behavior-03"></p>
<p>列表上下滑动式，底部评论区域随着顶部<code>Toolbar</code>的移动而移动，这里我们就可以自定义一个<code>Dependent</code>机制的<code>Behavior</code>，设置给底部视图，让其依赖于包裹<code>Toolbar</code>的<code>AppBarLayout</code>控件：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yifeng.mdstudysamples;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.content.Context;</span><br><span class="line"><span class="keyword">import</span> android.support.design.widget.AppBarLayout;</span><br><span class="line"><span class="keyword">import</span> android.support.design.widget.CoordinatorLayout;</span><br><span class="line"><span class="keyword">import</span> android.util.AttributeSet;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * Created by yifeng on 16/9/23.</span><br><span class="line"> *</span><br><span class="line"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomExpandBehavior</span> <span class="keyword">extends</span> <span class="title">CoordinatorLayout</span>.<span class="title">Behavior</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CustomExpandBehavior</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, attrs);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">layoutDependsOn</span><span class="params">(CoordinatorLayout parent, View child, View dependency)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dependency <span class="keyword">instanceof</span> AppBarLayout;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onDependentViewChanged</span><span class="params">(CoordinatorLayout parent, View child, View dependency)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> delta = dependency.getTop();</span><br><span class="line">        child.setTranslationY(-delta);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>布局内容如下：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">android.support.design.widget.CoordinatorLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span><br><span class="line">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></span><br><span class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span><br><span class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">android.support.design.widget.AppBarLayout</span></span><br><span class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/appbar"</span></span><br><span class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span><br><span class="line">        <span class="attr">android:layout_height</span>=<span class="string">"@dimen/dp_56"</span></span><br><span class="line">        <span class="attr">android:theme</span>=<span class="string">"@style/ThemeOverlay.AppCompat.Dark.ActionBar"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">include</span></span><br><span class="line">            <span class="attr">layout</span>=<span class="string">"@layout/include_toolbar"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">android.support.design.widget.AppBarLayout</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">android.support.v7.widget.RecyclerView</span></span><br><span class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/rv_content"</span></span><br><span class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span><br><span class="line">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span><br><span class="line">        <span class="attr">app:layout_behavior</span>=<span class="string">"@string/appbar_scrolling_view_behavior"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">RelativeLayout</span></span><br><span class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span><br><span class="line">        <span class="attr">android:layout_height</span>=<span class="string">"@dimen/dp_56"</span></span><br><span class="line">        <span class="attr">android:layout_gravity</span>=<span class="string">"bottom"</span></span><br><span class="line">        <span class="attr">app:layout_behavior</span>=<span class="string">".CustomExpandBehavior"</span></span><br><span class="line">        <span class="attr">android:padding</span>=<span class="string">"8dp"</span></span><br><span class="line">        <span class="attr">android:background</span>=<span class="string">"@color/blue"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">Button</span></span><br><span class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/btn_send"</span></span><br><span class="line">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span><br><span class="line">            <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span><br><span class="line">            <span class="attr">android:text</span>=<span class="string">"Send"</span></span><br><span class="line">            <span class="attr">android:layout_alignParentRight</span>=<span class="string">"true"</span></span><br><span class="line">            <span class="attr">android:background</span>=<span class="string">"@color/white"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">EditText</span></span><br><span class="line">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span><br><span class="line">            <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span><br><span class="line">            <span class="attr">android:layout_toLeftOf</span>=<span class="string">"@id/btn_send"</span></span><br><span class="line">            <span class="attr">android:layout_marginRight</span>=<span class="string">"4dp"</span></span><br><span class="line">            <span class="attr">android:padding</span>=<span class="string">"4dp"</span></span><br><span class="line">            <span class="attr">android:hint</span>=<span class="string">"Please input the comment"</span></span><br><span class="line">            <span class="attr">android:background</span>=<span class="string">"@color/white"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">android.support.design.widget.CoordinatorLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>注意，这里将自定义的<code>Behavior</code>设置给了底部内容的外层容器<code>RelativeLayout</code>，即可实现上述效果。</p>
<h1 id="Nested机制"><a href="#Nested机制" class="headerlink" title="Nested机制"></a><code>Nested</code>机制</h1><hr>
<p><code>Nested</code>机制要求<code>CoordinatorLayout</code>包含了一个实现了<code>NestedScrollingChild</code>接口的滚动视图控件，比如v7包中的<code>RecyclerView</code>，设置<code>Behavior</code>属性的Child View会随着这个控件的滚动而发生变化，涉及到的方法有：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">onStartNestedScroll(View child, View target, <span class="keyword">int</span> nestedScrollAxes)</span><br><span class="line"></span><br><span class="line">onNestedPreScroll(View target, <span class="keyword">int</span> dx, <span class="keyword">int</span> dy, <span class="keyword">int</span>[] consumed)</span><br><span class="line"></span><br><span class="line">onNestedPreFling(View target, <span class="keyword">float</span> velocityX, <span class="keyword">float</span> velocityY)</span><br><span class="line"></span><br><span class="line">onNestedScroll(View target, <span class="keyword">int</span> dxConsumed, <span class="keyword">int</span> dyConsumed, <span class="keyword">int</span> dxUnconsumed, <span class="keyword">int</span> dyUnconsumed)</span><br><span class="line"></span><br><span class="line">onNestedFling(View target, <span class="keyword">float</span> velocityX, <span class="keyword">float</span> velocityY, <span class="keyword">boolean</span> consumed)</span><br><span class="line"></span><br><span class="line">onStopNestedScroll(View target)</span><br></pre></td></tr></table></figure>
<p>其中，<code>onStartNestedScroll</code>方法返回一个boolean类型的值，只有返回true时才能让自定义的<code>Behavior</code>接受滑动事件。同样的，举例说明一下。</p>
<p>通过查看系统FAB控件的源码可以知道，系统FAB定义的<code>Behavior</code>能够处理两个交互，一个是与<code>SnackBar</code>的位置交互，效果如上面的图示一样，另一个就是与<code>AppBarLayout</code>的展示交互，都是使用的<code>Dependent</code>机制，效果在之前的文章 – <a href="http://www.jianshu.com/p/360fd368936d" target="_blank" rel="external">Android CoordinatorLayout 实战案例学习《二》</a> 中可以查看，也就是<code>AppBarLayout</code> 滚动到一定程度时，FAB控件的动画隐藏与展示。下面我们使用<code>Nested</code>机制自定义一个<code>Behavior</code>，实现如下与列表协调交互的效果：</p>
<p><img src="http://ocq7gtgqu.bkt.clouddn.com/behavior-02.gif" alt="Behavior-02"></p>
<p>为了能够使用系统FAB控件提供的隐藏与显示的动画效果，这里直接继承了系统FAB控件的<code>Behavior</code>：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yifeng.mdstudysamples;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.content.Context;</span><br><span class="line"><span class="keyword">import</span> android.support.design.widget.CoordinatorLayout;</span><br><span class="line"><span class="keyword">import</span> android.support.design.widget.FloatingActionButton;</span><br><span class="line"><span class="keyword">import</span> android.support.v4.view.ViewCompat;</span><br><span class="line"><span class="keyword">import</span> android.util.AttributeSet;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * Created by yifeng on 16/8/23.</span><br><span class="line"> *</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NestedFABBehavior</span> <span class="keyword">extends</span> <span class="title">FloatingActionButton</span>.<span class="title">Behavior</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">NestedFABBehavior</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onStartNestedScroll</span><span class="params">(CoordinatorLayout coordinatorLayout, FloatingActionButton child, View directTargetChild, View target, <span class="keyword">int</span> nestedScrollAxes)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> nestedScrollAxes == ViewCompat.SCROLL_AXIS_VERTICAL ||</span><br><span class="line">                <span class="keyword">super</span>.onStartNestedScroll(coordinatorLayout, child, directTargetChild, target,</span><br><span class="line">                        nestedScrollAxes);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNestedScroll</span><span class="params">(CoordinatorLayout coordinatorLayout, FloatingActionButton child, View target, <span class="keyword">int</span> dxConsumed, <span class="keyword">int</span> dyConsumed, <span class="keyword">int</span> dxUnconsumed, <span class="keyword">int</span> dyUnconsumed)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onNestedScroll(coordinatorLayout, child, target, dxConsumed, dyConsumed, dxUnconsumed, dyUnconsumed);</span><br><span class="line">        <span class="keyword">if</span> (dyConsumed &gt; <span class="number">0</span> &amp;&amp; child.getVisibility() == View.VISIBLE) &#123;</span><br><span class="line">            <span class="comment">//系统FAB控件提供的隐藏动画</span></span><br><span class="line">            child.hide();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (dyConsumed &lt; <span class="number">0</span> &amp;&amp; child.getVisibility() != View.VISIBLE) &#123;</span><br><span class="line">            <span class="comment">//系统FAB控件提供的显示动画</span></span><br><span class="line">            child.show();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后在布局中添加<code>RecyclerView</code>，并为系统FAB控件设置自定义的<code>Behavior</code>，内容如下：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">android.support.design.widget.CoordinatorLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span><br><span class="line">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></span><br><span class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span><br><span class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">android.support.design.widget.AppBarLayout</span></span><br><span class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/appbar"</span></span><br><span class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span><br><span class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span><br><span class="line">        <span class="attr">android:theme</span>=<span class="string">"@style/ThemeOverlay.AppCompat.Dark.ActionBar"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">include</span></span><br><span class="line">            <span class="attr">layout</span>=<span class="string">"@layout/include_toolbar"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">android.support.design.widget.AppBarLayout</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">android.support.v7.widget.RecyclerView</span></span><br><span class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/rv_content"</span></span><br><span class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span><br><span class="line">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">android.support.design.widget.FloatingActionButton</span></span><br><span class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/fab_add"</span></span><br><span class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span><br><span class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span><br><span class="line">        <span class="attr">android:layout_margin</span>=<span class="string">"@dimen/dp_16"</span></span><br><span class="line">        <span class="attr">android:src</span>=<span class="string">"@mipmap/ic_toolbar_add"</span></span><br><span class="line">        <span class="attr">app:layout_anchor</span>=<span class="string">"@id/rv_content"</span></span><br><span class="line">        <span class="attr">app:layout_anchorGravity</span>=<span class="string">"bottom|right"</span></span><br><span class="line">        <span class="attr">app:backgroundTint</span>=<span class="string">"@color/fab_ripple"</span></span><br><span class="line">        <span class="attr">app:layout_behavior</span>=<span class="string">"com.yifeng.mdstudysamples.NestedFABBehavior"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">android.support.design.widget.CoordinatorLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>这样，即可实现系统FAB控件与列表滑动控件的交互效果。</p>
<h1 id="string-appbar-scrolling-view-behavior"><a href="#string-appbar-scrolling-view-behavior" class="headerlink" title="@string/appbar_scrolling_view_behavior"></a>@string/appbar_scrolling_view_behavior</h1><hr>
<p>这是一个系统字符串，值为：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android.support.design.widget.AppBarLayout$ScrollingViewBehavior</span><br></pre></td></tr></table></figure>
<p>在<code>CoordinatorLayout</code>容器中，通常用在<code>AppBarLayout</code>视图下面（不是里面）的内容控件中，比如上面的<code>RecyclerView</code>，如果我们不给它添加这个<code>Behavior</code>，<code>Toolbar</code>将覆盖在列表上面，出现重叠部分，如图</p>
<p><img src="http://ocq7gtgqu.bkt.clouddn.com/behavior-removed.png" alt="behavior-removed"></p>
<p>添加之后，<code>RecyclerView</code>将位于<code>Toolbar</code>下面，类似在<code>RelativeLayout</code>中设置了<code>below</code>属性，如图：</p>
<p><img src="http://ocq7gtgqu.bkt.clouddn.com/beharior-added.png" alt="beharior-added"></p>
<h1 id="示例源码"><a href="#示例源码" class="headerlink" title="示例源码"></a>示例源码</h1><hr>
<p>我在GitHub上建立了一个Repository，用来存放整个Android Material Design系列控件的学习案例，会伴随着文章逐渐更新完善，欢迎大家补充交流，Star地址：</p>
<p><a href="https://github.com/Mike-bel/MDStudySamples" target="_blank" rel="external">https://github.com/Mike-bel/MDStudySamples</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在MD系列的前几篇文章中，通过基础知识和实战案例配合讲解的形式介绍了&lt;code&gt;CoordinatorLayout&lt;/code&gt;与&lt;code&gt;AppBarLayout&lt;/code&gt;、&lt;code&gt;Toolbar&lt;/code&gt;、&lt;code&gt;CollapsingToolbarLayout&lt;/code&gt;的使用，并实现了几种MD风格下比较炫酷的交互效果。学会怎么用之后，我们再想想，为什么它们之间能够产生这样的交互行为呢？其实就是因为&lt;code&gt;CoordinatorLayout.Behavior&lt;/code&gt;的存在，这也是本文所要讲述的内容。至此，Android Material Design系列的学习已进行到第八篇，大家可以点击以下链接查看之前的文章：&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://yifeng.studio/categories/Android/"/>
    
    
      <category term="Android" scheme="http://yifeng.studio/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Hexo 折腾记之站内搜索、百度统计、代码高亮</title>
    <link href="http://yifeng.studio/2016/09/10/Hexo-search-baidutongji-highlight/"/>
    <id>http://yifeng.studio/2016/09/10/Hexo-search-baidutongji-highlight/</id>
    <published>2016-09-10T00:14:16.000Z</published>
    <updated>2016-10-19T03:04:03.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>备注：以下内容均基于<code>yilia</code>主题样式的修改。</p>
</blockquote>
<a id="more"></a>
<h1 id="站内搜索"><a href="#站内搜索" class="headerlink" title="站内搜索"></a>站内搜索</h1><p><strong>1. 添加搜索框</strong></p>
<p>修改<code>left-col.ejs</code>文件，在<code>&lt;header id=&quot;header&quot; class=&quot;inner&quot;&gt;</code>代码下面添加：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;form <span class="class"><span class="keyword">class</span></span>=<span class="string">"search"</span> method=<span class="string">"get"</span> accept-charset=<span class="string">"utf-8"</span>&gt;</span><br><span class="line">		&lt;label&gt;Search&lt;/label&gt;</span><br><span class="line">    	&lt;input type=<span class="string">"text"</span> id=<span class="string">"chillax-search-input"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"st-search-input_my"</span> maxlength=<span class="string">"30"</span> placeholder=<span class="string">"search"</span> autocomplete=<span class="string">"off"</span> autocorrect=<span class="string">"off"</span> autocapitalize=<span class="string">"off"</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure>
<p>修改<code>main.styl</code>文件，在<code>.intrude-less</code>配置下面添加：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.search</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">1em</span> <span class="number">0</span> <span class="number">0</span> <span class="number">2.5em</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.search</span> <span class="selector-tag">input</span> &#123;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">1.8em</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid color-white;</span><br><span class="line">  <span class="attribute">color</span>: color-white;</span><br><span class="line">  <span class="attribute">background</span>: transparent;</span><br><span class="line">  <span class="attribute">padding-left</span>: <span class="number">4em</span>;</span><br><span class="line">&#125;</span><br><span class="line">@<span class="keyword">media</span> tablet &#123;</span><br><span class="line">  <span class="selector-class">.search</span> <span class="selector-tag">input</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">4em</span>;</span><br><span class="line">    <span class="attribute">-webkit-transition</span>: <span class="number">0.5s</span> width;</span><br><span class="line">    <span class="attribute">-moz-transition</span>: <span class="number">0.5s</span> width;</span><br><span class="line">    <span class="attribute">-ms-transition</span>: <span class="number">0.5s</span> width;</span><br><span class="line">    <span class="attribute">transition</span>: <span class="number">0.5s</span> width;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.search</span> <span class="selector-tag">input</span><span class="selector-pseudo">:focus</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">8em</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.search</span> <span class="selector-tag">label</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">form</span> <span class="selector-tag">input</span><span class="selector-class">.st-search-input_my</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">4px</span> <span class="number">9px</span> <span class="number">4px</span> <span class="number">27px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">190px</span>;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">32px</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">70px</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#666</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span><br><span class="line">  <span class="attribute">-webkit-border-radius</span>: <span class="number">15px</span>;</span><br><span class="line">  <span class="attribute">-moz-border-radius</span>: <span class="number">15px</span>;</span><br><span class="line">  <span class="attribute">-ms-border-radius</span>: <span class="number">15px</span>;</span><br><span class="line">  <span class="attribute">-o-border-radius</span>: <span class="number">15px</span>;</span><br><span class="line">  <span class="attribute">-webkit-border-radius</span>: <span class="number">15px</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">15px</span>;</span><br><span class="line">  <span class="attribute">-webkit-box-shadow</span>: inset <span class="number">0</span> <span class="number">1px</span> <span class="number">3px</span> <span class="number">0</span> <span class="built_in">rgba</span>(0,0,0,0.17);</span><br><span class="line">  <span class="attribute">-moz-box-shadow</span>: inset <span class="number">0</span> <span class="number">1px</span> <span class="number">3px</span> <span class="number">0</span> <span class="built_in">rgba</span>(0,0,0,0.17);</span><br><span class="line">  <span class="attribute">-webkit-box-shadow</span>: inset <span class="number">0</span> <span class="number">1px</span> <span class="number">3px</span> <span class="number">0</span> <span class="built_in">rgba</span>(0,0,0,0.17);</span><br><span class="line">  <span class="attribute">box-shadow</span>: inset <span class="number">0</span> <span class="number">1px</span> <span class="number">3px</span> <span class="number">0</span> <span class="built_in">rgba</span>(0,0,0,0.17);</span><br><span class="line">  <span class="attribute">outline</span>: none;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#fcfcfc</span> <span class="built_in">url</span>(<span class="string">"/img/search.png"</span>) no-repeat <span class="number">7px</span> <span class="number">7px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>添加 Swiftype 搜索功能</strong></p>
<p>参考博客：</p>
<p><a href="http://www.jerryfu.net/post/search-engine-for-hexo-with-swiftype-v2.html" target="_blank" rel="external">利用swiftype为hexo添加站内搜索v2.0</a></p>
<h1 id="百度统计"><a href="#百度统计" class="headerlink" title="百度统计"></a>百度统计</h1><p><code>yilia</code>主题添加百度统计的过程可以参考谷歌统计，大致流程如下：</p>
<ul>
<li>编辑 <code>yilia/_config.yml</code> 文件，添加如下代码：</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">baidu_tongji: <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<ul>
<li>新建 <code>yilia/layout/_partial/baidu_tongji.ejs</code> 文件，内容如下：</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;% <span class="keyword">if</span> (theme.baidu_tongji) &#123; %&gt;</span><br><span class="line">&lt;script type="text/javascript"&gt;</span><br><span class="line">#申请的百度统计代码</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>编辑 <code>yilia/layout/_partial/head.ejs</code>文件，在 <code>&lt;/head&gt;</code> 语句上面添加：</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- partial(<span class="string">"baidu_tongji"</span>) %&gt;</span><br></pre></td></tr></table></figure>
<h1 id="代码高亮"><a href="#代码高亮" class="headerlink" title="代码高亮"></a>代码高亮</h1><p>Hexo 自动集成了 <code>highlight.js</code> ，所以在编辑文章时，可以在代码块的标识符号后面添加对应代码的语言标识即可，目前支持的语言及其标识可参考地址:</p>
<p><a href="http://highlightjs.readthedocs.io/en/latest/css-classes-reference.html" target="_blank" rel="external">http://highlightjs.readthedocs.io/en/latest/css-classes-reference.html</a></p>
<p>补充：<a href="https://liuzhichao.com/2016/hexo-use-prettify-to-highlight-code.html" target="_blank" rel="external">Hexo优化之使用Google Prettify高亮代码</a></p>
<h1 id="菜单页分类"><a href="#菜单页分类" class="headerlink" title="菜单页分类"></a>菜单页分类</h1><p><code>yilia</code> 主题的菜单页分类功能，比如在 <code>归档</code> 下面添加 <code>/categories/Android</code> ，在本地服务 <code>localhost:4000</code> 预览时会出现错误，但是部署在远程服务器时没有这个问题，暂时不知道是何原因。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;备注：以下内容均基于&lt;code&gt;yilia&lt;/code&gt;主题样式的修改。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Hexo" scheme="http://yifeng.studio/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="http://yifeng.studio/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Android 利用Gradle实现app的环境分离</title>
    <link href="http://yifeng.studio/2016/09/06/apk-environment-separate/"/>
    <id>http://yifeng.studio/2016/09/06/apk-environment-separate/</id>
    <published>2016-09-06T14:02:40.000Z</published>
    <updated>2016-09-10T00:21:23.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="环境分离"><a href="#环境分离" class="headerlink" title="环境分离"></a>环境分离</h1><p>有过互联网软件开发经验的朋友一定对于测试环境和生产环境这两个词很是熟悉，一般软件开发阶段都是在测试环境（比较常用的是内网环境）上运行调试，而正式打包发布时会配置生产环境（也称之为线上环境）的服务器，也就是不同的接口URL和数据库的区别。在开发和测试阶段，我们常常需要在同一个设备上同时安装着两套甚至多套环境的同一个应用，便于观察调试。</p>
<a id="more"></a>
<p>但对于Android App来讲，相同包名的apk在同一个设备上只能存在一个。所以我们无法做到在同一个设备上同时安装生产环境和测试环境的安装包，这对于日常的开发工作和测试人员的测试工作极不方便。总不能将整个工程复制一份，再通过修改包名的方式打包出另一个apk吧。所以在这种情况下，以往常见的做法就是在app中提供一个隐形的入口，供内部人员切换服务器地址，然后通过以下代码重启App：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">restartApp</span><span class="params">()</span></span>&#123;</span><br><span class="line">	Intent intent = getContext().getPackageManager().getLaunchIntentForPackage(getContext().getPackageName());</span><br><span class="line">	intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);</span><br><span class="line">	startActivity(intent);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>显然，这种做法也只是一种缓兵之计，多少还是有些不尽人意。然而，值得庆幸地是，进入Android Studio时代后，Google开始使用引入Gradle构建系统，applicationId的出现使得环境分离的问题迎刃而解。</p>
<h1 id="package-与-applicationId"><a href="#package-与-applicationId" class="headerlink" title="package 与 applicationId"></a>package 与 applicationId</h1><p>在使用Eclipse开发Apk或旧版本的Gradle构建系统中，应用的包名由<code>AndroidManifest.xml</code>文件中package属性决定。同时，这个package还被用来定义命名被引用的资源类R文件。</p>
<p>但是在新的Android Gradle构建系统中，package属性的两大作用得到了解藕：applicationId作为应用的唯一标识符（包名），用于区分不同应用；package属性定义资源类R文件，用于引用。</p>
<p>applicationId存在于app/build.gradle文件中的defaultConfig配置下，新建项目时默认使用package属性值初始化，所以如果没有特殊的需求，一般我们不会在意和修改这个值：</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">apply plugin: <span class="string">'com.android.application'</span></span><br><span class="line"></span><br><span class="line">android &#123;</span><br><span class="line">    compileSdkVersion <span class="number">19</span></span><br><span class="line">    buildToolsVersion <span class="string">"19.1"</span></span><br><span class="line"></span><br><span class="line">    defaultConfig &#123;</span><br><span class="line">        applicationId <span class="string">"com.example.my.app"</span></span><br><span class="line">        minSdkVersion <span class="number">15</span></span><br><span class="line">        targetSdkVersion <span class="number">19</span></span><br><span class="line">        versionCode <span class="number">1</span></span><br><span class="line">        versionName <span class="string">"1.0"</span></span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure>
<p>所以，要实现Apk的环境分离，也就是在同一设备上安装同一应用的不同版本，从本质上我们要修改applicationId的值，构建打包出不同包名的apk安装文件。Gradle构建系统提供了两种方式供开发人员修改applicationId的值，productFlavors和buildTypes，通过这两个方式我们可以轻松实现apk的打包定制，或者说Build Variants（构建变种）。</p>
<h1 id="Build-Variants"><a href="#Build-Variants" class="headerlink" title="Build Variants"></a>Build Variants</h1><p>项目的productFlavors和buildTypes配置可以在app/build.gradle代码文件或者Project Structure上修改，作用是一样的。</p>
<h2 id="productFlavors"><a href="#productFlavors" class="headerlink" title="productFlavors"></a>productFlavors</h2><p>项目可以通过定义多个不同的productFlavors来实现应用的不同定制版本，每一个Flavor与buildTypes配合产出对应的一种输出类型的apk文件，新建的项目初始化只有一个默认的Flavor：defaultConfig</p>
<p><img src="http://ocq7gtgqu.bkt.clouddn.com/productFlavors.png" alt="productFlavors"></p>
<p>注意：默认的defaultConfig为新建的productFlavors提供基本的配置，也就说，productFlavors的配置会覆盖defaultConfig中相同的属性，从而实现产品的不同定制版输出。对于环境分离，这里可以通过定义新的applicationId属性来实现。</p>
<h2 id="buildTypes"><a href="#buildTypes" class="headerlink" title="buildTypes"></a>buildTypes</h2><p>默认情况下，项目的buildTypes包含debug和release两个构建版本，其中release版本的执行需要手动设置签名文件。对于环境分离，与productFlavors不同的是，buildTypes通过定义applicationIdSuffix来实现的，即添加后缀名：</p>
<p><img src="http://ocq7gtgqu.bkt.clouddn.com/buildTypes.png" alt="http://ocq7gtgqu.bkt.clouddn.com/buildTypes.png"></p>
<p>除了这些可配置的属性外，productFlavors和buildTypes都会通过各自的sourceSet来提供代码和资源，默认的路径为：src/flavorName和src/typeName。利用这个特性，我们可以实现不同定制版本的apk显示不同的应用名称和桌面图标，以便从设备上进行区分。</p>
<p>productFlavors和buildTypes配合产出各种格式为“flavorName ＋ typeName”的Build Variants，以打包出不同版本的apk。当你没有自定义flavors，默认的defaultConfig也会与buildTypes形成对应的Build Variants，只是没有名字，所以显示为debug和release。比如这段配置：</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">android &#123;</span><br><span class="line"></span><br><span class="line">	...</span><br><span class="line"></span><br><span class="line">    productFlavors&#123;</span><br><span class="line">        beta&#123;</span><br><span class="line">            applicationId <span class="string">'com.yifeng.mdstudysamples.beta'</span></span><br><span class="line">        &#125;</span><br><span class="line">        production&#123;</span><br><span class="line">            applicationId <span class="string">'com.yifeng.mdstudysamples'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    buildTypes &#123;</span><br><span class="line">        release &#123;</span><br><span class="line">            minifyEnabled <span class="keyword">false</span></span><br><span class="line">            proguardFiles getDefaultProguardFile(<span class="string">'proguard-android.txt'</span>), <span class="string">'proguard-rules.pro'</span></span><br><span class="line">        &#125;</span><br><span class="line">        debug &#123;</span><br><span class="line">            applicationIdSuffix <span class="string">'.debug'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们配置了beta和production两种productFlavors，release和debug两种buildTypes。所以，对应的Build Variants就有四种，分别为：betaDebug、betaRelease、productionDebug和productRelease。可以在Build Variants窗口查看并选择对应的构建类型运行应用：</p>
<p><img src="http://ocq7gtgqu.bkt.clouddn.com/Build%20Variants.png" alt="Build Variants"></p>
<p>注意：前面提到，buildTypes通过添加后缀的方式修改applicationId（包名）的，换句话说，就是在productFlavors的基础上修改包名的。所以，在上面这个例子中，betaRelease构建类型打包出的apk文件的包名是：com.yifeng.mdstudysamples.beta.debug。</p>
<h1 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h1><p>通过上面这些介绍，基本上大家能够知道在Android上如何实现app的环境分离了。我们可以选择使用productFlavors和buildTypes这两种方式在同一个设备上来安装同一个应用的不同版本。他们道理上是一样的，只是相比之下，使用buildTypes不用新建productFlavors，更为方便。这里我就buildTypes为例简单描述一下环境分离的实现。</p>
<p>1.对于一个默认productFlavors和buildTypes配置的项目，我们修改debug配置的applicationIdSuffix属性，设为”.debug”（名字可以随意设置），release版本不用变动。</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    buildTypes &#123;</span><br><span class="line">        release &#123;</span><br><span class="line">            minifyEnabled <span class="keyword">false</span></span><br><span class="line">            proguardFiles getDefaultProguardFile(<span class="string">'proguard-android.txt'</span>), <span class="string">'proguard-rules.pro'</span></span><br><span class="line">        &#125;</span><br><span class="line">        debug &#123;</span><br><span class="line">            applicationIdSuffix <span class="string">'.debug'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>有了这一步，已经能够将debug版本和release的apk安装在同一个设备上了。还可以做到更好，比如修改debug版本的桌面图标、应用名称等，便于区分。</p>
<p>2.我们在src目录下新建一个debug目录，将main目录下的res目录复制一份到debug目录下，修改各个分辨率下的桌面Icon和strings.xml文件中的应用名称，加个debug标识。目录结构如图所示：</p>
<p><img src="http://ocq7gtgqu.bkt.clouddn.com/debug_res.png" alt="debug_res"></p>
<p>在构建打包时，debug目录下的res资源采用叠加的方式合并到main里面去，并替换相同的内容，而这个例子只需要修改桌面Icon和应用名称，所以这里我只复制了res目录下的相关文件，其他文件并未复制。</p>
<p>3.修改代码里的服务器接口地址，选择对应的Build Variants类型，运行即可。其实也可以在debug和main目录下的string.xml资源文件中定义服务器地址，然后在程序的入口处赋值给代码里的全局静态变量。</p>
<h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><ul>
<li><a href="http://keeganlee.me/post/architecture/20160329" target="_blank" rel="external">http://keeganlee.me/post/architecture/20160329</a></li>
<li><a href="https://chaosleong.gitbooks.io/gradle-for-android/content/index.html" target="_blank" rel="external">https://chaosleong.gitbooks.io/gradle-for-android/content/index.html</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;环境分离&quot;&gt;&lt;a href=&quot;#环境分离&quot; class=&quot;headerlink&quot; title=&quot;环境分离&quot;&gt;&lt;/a&gt;环境分离&lt;/h1&gt;&lt;p&gt;有过互联网软件开发经验的朋友一定对于测试环境和生产环境这两个词很是熟悉，一般软件开发阶段都是在测试环境（比较常用的是内网环境）上运行调试，而正式打包发布时会配置生产环境（也称之为线上环境）的服务器，也就是不同的接口URL和数据库的区别。在开发和测试阶段，我们常常需要在同一个设备上同时安装着两套甚至多套环境的同一个应用，便于观察调试。&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://yifeng.studio/categories/Android/"/>
    
    
      <category term="Android" scheme="http://yifeng.studio/tags/Android/"/>
    
      <category term="Gradle" scheme="http://yifeng.studio/tags/Gradle/"/>
    
  </entry>
  
  <entry>
    <title>详解Java中的对象克隆</title>
    <link href="http://yifeng.studio/2016/05/13/java_object_clone/"/>
    <id>http://yifeng.studio/2016/05/13/java_object_clone/</id>
    <published>2016-05-13T08:37:00.000Z</published>
    <updated>2016-09-10T00:13:37.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>在 Java 语言中，我们说两个对象是否相等通常有两层含义：</p>
<ul>
<li><p>对象的内容是否相等，通常使用到对象的 <code>equals(Object o)</code> 函数；</p>
</li>
<li><p>引用的地址是否相同，使用运算符 <code>＝＝</code> 比较即可。</p>
</li>
</ul>
<p>当两个对象通过赋值符号 <code>=</code> 赋值时，表明这两个对象指向了内存中同一个地址，所以改变其中一个对象的内容，也就间接地改变了另一个对象的内容。有时候，我们需要从一个已经存在的对象重新拷贝一份出来，并且不仅这两个对象内容相等，在内存中存在两个独立的存储地址，互不影响，这时，就需要用到 Java 中的克隆机制。</p>
<a id="more"></a>
<h4 id="Cloneable"><a href="#Cloneable" class="headerlink" title="Cloneable"></a>Cloneable</h4><p>通过 Cloneable 接口可以很轻松地实现 Java 对象的克隆，只需要 implements Cloneable 并实现 Object 的 clone() 方法即可，如：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Cloneable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> String username;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(String username, String password)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">super</span>();</span><br><span class="line">		<span class="keyword">this</span>.username = username;</span><br><span class="line">		<span class="keyword">this</span>.password = password;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> username;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.username = username;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> password;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.password = password;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> Object <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">super</span>.clone();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">		User user = (User) obj;</span><br><span class="line">		<span class="keyword">if</span> (username.equals(user.username) &amp;&amp; password.equals(user.password)) &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意这里对象实现的是 Object 类的 clone() 方法，因为 Cloneable 是一个空接口：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> java.lang;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * A class implements the &lt;code&gt;Cloneable&lt;/code&gt; interface to</span><br><span class="line"> * indicate to the &#123;<span class="doctag">@link</span> java.lang.Object#clone()&#125; method that it</span><br><span class="line"> * is legal for that method to make a</span><br><span class="line"> * field-for-field copy of instances of that class.</span><br><span class="line"> * &lt;p&gt;</span><br><span class="line"> * Invoking Object's clone method on an instance that does not implement the</span><br><span class="line"> * &lt;code&gt;Cloneable&lt;/code&gt; interface results in the exception</span><br><span class="line"> * &lt;code&gt;CloneNotSupportedException&lt;/code&gt; being thrown.</span><br><span class="line"> * &lt;p&gt;</span><br><span class="line"> * By convention, classes that implement this interface should override</span><br><span class="line"> * &lt;tt&gt;Object.clone&lt;/tt&gt; (which is protected) with a public method.</span><br><span class="line"> * See &#123;<span class="doctag">@link</span> java.lang.Object#clone()&#125; for details on overriding this</span><br><span class="line"> * method.</span><br><span class="line"> * &lt;p&gt;</span><br><span class="line"> * Note that this interface does &lt;i&gt;not&lt;/i&gt; contain the &lt;tt&gt;clone&lt;/tt&gt; method.</span><br><span class="line"> * Therefore, it is not possible to clone an object merely by virtue of the</span><br><span class="line"> * fact that it implements this interface.  Even if the clone method is invoked</span><br><span class="line"> * reflectively, there is no guarantee that it will succeed.</span><br><span class="line"> *</span><br><span class="line"> * <span class="doctag">@author</span>  unascribed</span><br><span class="line"> * <span class="doctag">@see</span>     java.lang.CloneNotSupportedException</span><br><span class="line"> * <span class="doctag">@see</span>     java.lang.Object#clone()</span><br><span class="line"> * <span class="doctag">@since</span>   JDK1.0</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Cloneable</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>从源码注释中可以看出，需要实现 Object 类中的 clone() 方法（注意：clone() 函数是一个 native 方法，同时抛出了一个异常）：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * Creates and returns a copy of this object.  The precise meaning</span><br><span class="line"> * of "copy" may depend on the class of the object. The general</span><br><span class="line"> * intent is that, for any object &#123;<span class="doctag">@code</span> x&#125;, the expression:</span><br><span class="line"> * &lt;blockquote&gt;</span><br><span class="line"> * &lt;pre&gt;</span><br><span class="line"> * x.clone() != x&lt;/pre&gt;&lt;/blockquote&gt;</span><br><span class="line"> * will be true, and that the expression:</span><br><span class="line"> * &lt;blockquote&gt;</span><br><span class="line"> * &lt;pre&gt;</span><br><span class="line"> * x.clone().getClass() == x.getClass()&lt;/pre&gt;&lt;/blockquote&gt;</span><br><span class="line"> * will be &#123;<span class="doctag">@code</span> true&#125;, but these are not absolute requirements.</span><br><span class="line"> * While it is typically the case that:</span><br><span class="line"> * &lt;blockquote&gt;</span><br><span class="line"> * &lt;pre&gt;</span><br><span class="line"> * x.clone().equals(x)&lt;/pre&gt;&lt;/blockquote&gt;</span><br><span class="line"> * will be &#123;<span class="doctag">@code</span> true&#125;, this is not an absolute requirement.</span><br><span class="line"> * &lt;p&gt;</span><br><span class="line"> * By convention, the returned object should be obtained by calling</span><br><span class="line"> * &#123;<span class="doctag">@code</span> super.clone&#125;.  If a class and all of its superclasses (except</span><br><span class="line"> * &#123;<span class="doctag">@code</span> Object&#125;) obey this convention, it will be the case that</span><br><span class="line"> * &#123;<span class="doctag">@code</span> x.clone().getClass() == x.getClass()&#125;.</span><br><span class="line"> * &lt;p&gt;</span><br><span class="line"> * By convention, the object returned by this method should be independent</span><br><span class="line"> * of this object (which is being cloned).  To achieve this independence,</span><br><span class="line"> * it may be necessary to modify one or more fields of the object returned</span><br><span class="line"> * by &#123;<span class="doctag">@code</span> super.clone&#125; before returning it.  Typically, this means</span><br><span class="line"> * copying any mutable objects that comprise the internal "deep structure"</span><br><span class="line"> * of the object being cloned and replacing the references to these</span><br><span class="line"> * objects with references to the copies.  If a class contains only</span><br><span class="line"> * primitive fields or references to immutable objects, then it is usually</span><br><span class="line"> * the case that no fields in the object returned by &#123;<span class="doctag">@code</span> super.clone&#125;</span><br><span class="line"> * need to be modified.</span><br><span class="line"> * &lt;p&gt;</span><br><span class="line"> * The method &#123;<span class="doctag">@code</span> clone&#125; for class &#123;<span class="doctag">@code</span> Object&#125; performs a</span><br><span class="line"> * specific cloning operation. First, if the class of this object does</span><br><span class="line"> * not implement the interface &#123;<span class="doctag">@code</span> Cloneable&#125;, then a</span><br><span class="line"> * &#123;<span class="doctag">@code</span> CloneNotSupportedException&#125; is thrown. Note that all arrays</span><br><span class="line"> * are considered to implement the interface &#123;<span class="doctag">@code</span> Cloneable&#125; and that</span><br><span class="line"> * the return type of the &#123;<span class="doctag">@code</span> clone&#125; method of an array type &#123;<span class="doctag">@code</span> T[]&#125;</span><br><span class="line"> * is &#123;<span class="doctag">@code</span> T[]&#125; where T is any reference or primitive type.</span><br><span class="line"> * Otherwise, this method creates a new instance of the class of this</span><br><span class="line"> * object and initializes all its fields with exactly the contents of</span><br><span class="line"> * the corresponding fields of this object, as if by assignment; the</span><br><span class="line"> * contents of the fields are not themselves cloned. Thus, this method</span><br><span class="line"> * performs a "shallow copy" of this object, not a "deep copy" operation.</span><br><span class="line"> * &lt;p&gt;</span><br><span class="line"> * The class &#123;<span class="doctag">@code</span> Object&#125; does not itself implement the interface</span><br><span class="line"> * &#123;<span class="doctag">@code</span> Cloneable&#125;, so calling the &#123;<span class="doctag">@code</span> clone&#125; method on an object</span><br><span class="line"> * whose class is &#123;<span class="doctag">@code</span> Object&#125; will result in throwing an</span><br><span class="line"> * exception at run time.</span><br><span class="line"> *</span><br><span class="line"> * <span class="doctag">@return</span>     a clone of this instance.</span><br><span class="line"> * <span class="doctag">@throws</span>  CloneNotSupportedException  if the object's class does not</span><br><span class="line"> *               support the &#123;<span class="doctag">@code</span> Cloneable&#125; interface. Subclasses</span><br><span class="line"> *               that override the &#123;<span class="doctag">@code</span> clone&#125; method can also</span><br><span class="line"> *               throw this exception to indicate that an instance cannot</span><br><span class="line"> *               be cloned.</span><br><span class="line"> * <span class="doctag">@see</span> java.lang.Cloneable</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">native</span> Object <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException</span>;</span><br></pre></td></tr></table></figure>
<p>从 clone() 函数的注释中能够看出对象与克隆对象之间的关系，测试代码如下（注意：我们在 User 对象中重写了 equals() 函数）：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> CloneNotSupportedException</span>&#123;</span><br><span class="line">	User userOne, userTwo, userThree;</span><br><span class="line">	userOne = <span class="keyword">new</span> User(<span class="string">"username"</span>, <span class="string">"password"</span>);</span><br><span class="line">	userTwo = userOne;</span><br><span class="line">	userThree = (User) userOne.clone();</span><br><span class="line">	</span><br><span class="line">	System.out.println(userTwo==userOne);			<span class="comment">//true</span></span><br><span class="line">	System.out.println(userTwo.equals(userOne));	<span class="comment">//true</span></span><br><span class="line">	</span><br><span class="line">	System.out.println(userThree==userOne);			<span class="comment">//false</span></span><br><span class="line">	System.out.println(userThree.equals(userOne));	<span class="comment">//true</span></span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>测试结果显示，通过 clone() 函数，我们成功地从 userOne 对象中克隆出了一份独立的 userThree 对象。</p>
<h4 id="浅克隆与深克隆"><a href="#浅克隆与深克隆" class="headerlink" title="浅克隆与深克隆"></a>浅克隆与深克隆</h4><p>谈此之前，我们先看一个例子，定义一个名为 Company 的类，并添加一个类型为 User 的成员变量：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Company</span> <span class="keyword">implements</span> <span class="title">Cloneable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> User user;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">private</span> String address;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Company</span><span class="params">(User user, String address)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">super</span>();</span><br><span class="line">		<span class="keyword">this</span>.user = user;</span><br><span class="line">		<span class="keyword">this</span>.address = address;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> user;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUser</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.user = user;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getAddress</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> address;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAddress</span><span class="params">(String address)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.address = address;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> Object <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">super</span>.clone();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">		Company company = (Company) obj;</span><br><span class="line">		<span class="keyword">if</span> (user.equals(company.getUser()) &amp;&amp; address.equals(company.address)) &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>测试代码及测试结果如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> CloneNotSupportedException</span>&#123;</span><br><span class="line">	Company companyOne, companyTwo, companyThree;</span><br><span class="line">	companyOne = <span class="keyword">new</span> Company(<span class="keyword">new</span> User(<span class="string">"username"</span>, <span class="string">"password"</span>), <span class="string">"上海市"</span>);</span><br><span class="line">	companyTwo = companyOne;</span><br><span class="line">	companyThree = (Company) companyOne.clone();</span><br><span class="line">	</span><br><span class="line">	System.out.println(companyTwo==companyOne);				<span class="comment">//true</span></span><br><span class="line">	System.out.println(companyTwo.equals(companyOne));		<span class="comment">//true</span></span><br><span class="line">	</span><br><span class="line">	System.out.println(companyThree==companyOne);			<span class="comment">//false</span></span><br><span class="line">	System.out.println(companyThree.equals(companyOne));	<span class="comment">//true</span></span><br><span class="line">	</span><br><span class="line">	System.out.println(companyThree.getUser()==companyOne.getUser());			<span class="comment">//true ? 这里为什么不是false呢</span></span><br><span class="line">	System.out.println(companyThree.getUser().equals(companyOne.getUser()));	<span class="comment">//true</span></span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>问题来了，companyThree 与 companyOne 中的 User 是同一个对象！也就是说 companyThree 只是克隆了 companyOne 的基本数据类型的数据，而对于引用类型的数据没有进行深度的克隆。也就是俗称的浅克隆。</p>
<p>浅克隆：顾名思义，就是很表层的克隆，只克隆对象自身的引用地址；</p>
<p>深克隆：也称“N层克隆”，克隆对象自身以及对象所包含的引用类型对象的引用地址。</p>
<p>这里需要注意的是，对于基本数据类型（primitive）和使用常量池方式创建的String 类型，都会针对原值克隆，所以不存在引用地址一说。当然不包括他们对应的包装类。</p>
<p>所以使用深克隆就可以解决上述 Company 对象克隆过后两个 user 对象的引用地址相同的问题。我们修改一下 Company 类的 clone() 函数：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> Object <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">	Company company = (Company) <span class="keyword">super</span>.clone();</span><br><span class="line">	company.user = (User) company.getUser().clone();</span><br><span class="line">	<span class="keyword">return</span> company;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>再运行测试代码，就能得到 <code>companyThree.getUser()==companyOne.getUser()</code> 为 false 的结果了。</p>
<h4 id="Serializable实现"><a href="#Serializable实现" class="headerlink" title="Serializable实现"></a>Serializable实现</h4><p>通过上述介绍，我们知道，实现一个对象的克隆，需要如下几步：</p>
<ol>
<li><p>对象所在的类实现 Cloneable 接口；</p>
</li>
<li><p>重写 clone() 函数，如果包涵引用类型的成员变量，需要使用深克隆。</p>
</li>
</ol>
<p>如果对象不包含引用类型成员或者数量少的话，使用 Cloneable 接口还能接受，但当对象包含多个引用类型的成员，同时这些成员又包含了引用类型的成员，那层层克隆岂不是相当繁琐，并且维护不便？所以，这里介绍一种更加方便的实现方式，使用 <code>ObjectOutputStream</code> 和 <code>ObjectOutputStream</code> 来实现对象的序列化和反序列化：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">BeanUtils</span> </span>&#123;</span><br><span class="line">	<span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">cloneTo</span><span class="params">(T src)</span> <span class="keyword">throws</span> RuntimeException </span>&#123;</span><br><span class="line">		ByteArrayOutputStream memoryBuffer = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">		ObjectOutputStream out = <span class="keyword">null</span>;</span><br><span class="line">		ObjectInputStream in = <span class="keyword">null</span>;</span><br><span class="line">		T dist = <span class="keyword">null</span>;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			out = <span class="keyword">new</span> ObjectOutputStream(memoryBuffer);</span><br><span class="line">			out.writeObject(src);</span><br><span class="line">			out.flush();</span><br><span class="line">			in = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> ByteArrayInputStream(memoryBuffer.toByteArray()));</span><br><span class="line">			dist = (T) in.readObject();</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">		&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">			<span class="keyword">if</span> (out != <span class="keyword">null</span>)</span><br><span class="line">				<span class="keyword">try</span> &#123;</span><br><span class="line">					out.close();</span><br><span class="line">					out = <span class="keyword">null</span>;</span><br><span class="line">				&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">					<span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">				&#125;</span><br><span class="line">			<span class="keyword">if</span> (in != <span class="keyword">null</span>)</span><br><span class="line">				<span class="keyword">try</span> &#123;</span><br><span class="line">					in.close();</span><br><span class="line">					in = <span class="keyword">null</span>;</span><br><span class="line">				&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">					<span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">				&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> dist;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>只要要克隆的对象以及对象所包含的引用类型的成员对象所在的类实现了 <code>java.io.Serializable</code> 接口即可实现完美克隆。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h4&gt;&lt;p&gt;在 Java 语言中，我们说两个对象是否相等通常有两层含义：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;对象的内容是否相等，通常使用到对象的 &lt;code&gt;equals(Object o)&lt;/code&gt; 函数；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;引用的地址是否相同，使用运算符 &lt;code&gt;＝＝&lt;/code&gt; 比较即可。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当两个对象通过赋值符号 &lt;code&gt;=&lt;/code&gt; 赋值时，表明这两个对象指向了内存中同一个地址，所以改变其中一个对象的内容，也就间接地改变了另一个对象的内容。有时候，我们需要从一个已经存在的对象重新拷贝一份出来，并且不仅这两个对象内容相等，在内存中存在两个独立的存储地址，互不影响，这时，就需要用到 Java 中的克隆机制。&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="http://yifeng.studio/categories/Java/"/>
    
    
      <category term="Java" scheme="http://yifeng.studio/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>走上Hexo搭建博客的不归之路</title>
    <link href="http://yifeng.studio/2016/04/12/hexo_references/"/>
    <id>http://yifeng.studio/2016/04/12/hexo_references/</id>
    <published>2016-04-12T04:44:32.000Z</published>
    <updated>2016-09-10T00:13:47.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="写在开始"><a href="#写在开始" class="headerlink" title="写在开始"></a>写在开始</h4><p>许久以来，一直羡慕那些拥有个人独立博客空间的博主们，能够写写博客，记录自己的成长之旅。为什么需要一个自己的博客网站？作为写手，从开始的CSDN，到最近的简书，用过各种写作平台，但始终没能心满意足。一些博客网站打开就被满屏的广告蒙蔽了双眼，要么功能设计不合心意，甚是不爽。遂萌生了搭建一个属于独立博客网站的想法。在浏览了各路大神的博客网站和在各种搭建工具之后，终于找到了一个符合心意的，那就是Hexo，一个快速的、简单的、功能强大的博客网站搭建框架。</p>
<a id="more"></a>
<h4 id="初识Hexo"><a href="#初识Hexo" class="headerlink" title="初识Hexo"></a>初识Hexo</h4><p>Hexo官方地址：<br><a href="https://hexo.io/" target="_blank" rel="external">https://hexo.io/</a></p>
<p>Hexo是一个基于Node.js开发的快速静态博客框架，能够完美的支持MarkDown格式的写作，能够很方便的一键部署到 GitHub Pages、Heroku等其他托管网站，同时，Hexo拥有丰富的插件，满足你各式的需求。</p>
<h4 id="安装使用"><a href="#安装使用" class="headerlink" title="安装使用"></a>安装使用</h4><p>安装Hexo之前，必须安装下面两个软件，在他们官网下载安装即可：</p>
<ul>
<li><p><a href="https://nodejs.org/en/#download" target="_blank" rel="external">Node.js</a></p>
</li>
<li><p><a href="https://git-scm.com/downloads" target="_blank" rel="external">Git</a></p>
</li>
</ul>
<p>关于Hexo的安装教程直接参考官网文档，或者网上直接搜索，这里就不浪费空间了：</p>
<p><a href="https://hexo.io/docs/index.html" target="_blank" rel="external">Hexo Documentation</a></p>
<p>阅读英文文档有困难的同学也可以参考如下链接中的文章：</p>
<ul>
<li><a href="http://zipperary.com/categories/hexo/" target="_blank" rel="external">Zipperary’ bolg</a></li>
</ul>
<h4 id="主题配置"><a href="#主题配置" class="headerlink" title="主题配置"></a>主题配置</h4><p>Hexo的主题样式非常多，在GitHub和Hexo官网上作者也推荐了一些优秀主题和优秀网站，大家可以根据个人喜好，选择一款，地址如下：</p>
<ul>
<li><p><a href="https://hexo.io/themes/" target="_blank" rel="external">Hexo 官网主题推荐</a></p>
</li>
<li><p><a href="https://github.com/hexojs/hexo/wiki/Sites" target="_blank" rel="external">GitHub 优秀网站收录</a></p>
</li>
</ul>
<p>在这里，特别说明一下人气非常高的一款主题：Next，亦枫的博客网站也将使用这款主题搭建，官网教程地址如下：</p>
<p><a href="http://theme-next.iissnan.com/" target="_blank" rel="external">http://theme-next.iissnan.com/</a></p>
<p>Next的主题精髓在于：<strong>精于心，简于形</strong>。</p>
<p>另外再推荐一些亦枫本人喜欢的Hexo主题网站（也有干货），仅供学习和参考：</p>
<ul>
<li><p><a href="http://blog.zhangruipeng.me/hexo-theme-icarus/" target="_blank" rel="external">http://blog.zhangruipeng.me/hexo-theme-icarus/</a></p>
</li>
<li><p><a href="http://zipperary.com/" target="_blank" rel="external">http://zipperary.com/</a></p>
</li>
<li><p><a href="http://ursb.me/" target="_blank" rel="external">http://ursb.me/</a></p>
</li>
<li><p><a href="https://github.com/litten/hexo-theme-yilia" target="_blank" rel="external">https://github.com/litten/hexo-theme-yilia</a></p>
</li>
<li><p><a href="https://github.com/Huxpro/huxpro.github.io" target="_blank" rel="external">huxpro.github.io</a></p>
</li>
<li><p><a href="https://github.com/hexojs/hexo-theme-light" target="_blank" rel="external">https://github.com/hexojs/hexo-theme-light</a></p>
</li>
<li><p><a href="http://mazhuang.org/" target="_blank" rel="external">http://mazhuang.org/</a></p>
</li>
</ul>
<h4 id="关于亦枫"><a href="#关于亦枫" class="headerlink" title="关于亦枫"></a>关于亦枫</h4><p>亦枫的独立博客网站之路刚刚开始，更多实用的好玩的功能和插件也在慢慢探索当中，希望通过标签Hexo的文章来记录这一过程。一些具体操作方法和实现过程就不详细阐述，只提供思路和参考链接，大家通过官网教程或者搜索查询都能找到答案，而我这里，除了自己温故的，就剩下好玩的了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;写在开始&quot;&gt;&lt;a href=&quot;#写在开始&quot; class=&quot;headerlink&quot; title=&quot;写在开始&quot;&gt;&lt;/a&gt;写在开始&lt;/h4&gt;&lt;p&gt;许久以来，一直羡慕那些拥有个人独立博客空间的博主们，能够写写博客，记录自己的成长之旅。为什么需要一个自己的博客网站？作为写手，从开始的CSDN，到最近的简书，用过各种写作平台，但始终没能心满意足。一些博客网站打开就被满屏的广告蒙蔽了双眼，要么功能设计不合心意，甚是不爽。遂萌生了搭建一个属于独立博客网站的想法。在浏览了各路大神的博客网站和在各种搭建工具之后，终于找到了一个符合心意的，那就是Hexo，一个快速的、简单的、功能强大的博客网站搭建框架。&lt;/p&gt;
    
    </summary>
    
      <category term="Hexo" scheme="http://yifeng.studio/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="http://yifeng.studio/tags/Hexo/"/>
    
  </entry>
  
</feed>
